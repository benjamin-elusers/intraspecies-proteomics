[{"path":"index.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"","code":""},{"path":"index.html","id":"about","chapter":"1 Introduction","heading":"1.1 About","text":"project results collaboration groups E. Levy (Weizmmann, IL)\nJ. Schacherer (CNRS/Univ. Strasbourg).","code":""},{"path":"index.html","id":"abstract","chapter":"1 Introduction","heading":"1.2 Abstract","text":"Cells proteomes constantly evolve adapt survive wide\nvariety ecological niches. phenotypic diversity arises populations\nrelatively short timescales (1 100s thousand years), longer timescales (1\n100s million years) involved divergence species. \nsignatures evolutionary processes carved every single\nprotein sequence accumulation mutations, thereby reshaping cell\nmachineries, including protein complexes, signaling pathways, metabolic\npathways example.Interestingly, long timescales, different proteins accumulate mutations \nmarkedly different rates. example, orthologous proteins S. cerevisiae \nS. pombe share 42% (+/- 14%) sequence identity average, orthologs\nexhibit higher conservation. example, actins share 89.7% sequence identity,\nillustrating proteins tolerate mutations others. One\nbiophysical property correlates sequence divergence \nprotein abundance. abundant protein, conserved \nsequence. abundance-conservation correlation well established,\nmechanistic origin well understood. Toxicity associated \nmutation-induced misfolding suggested possible origin, recent\nworks, including (Dubreuil et al. 2019) show unlikely\nmain driving mechanism.resolve mechanisms shaping protein evolution, propose integrate\nanalyses sequence evolution across timescales. one hand, evolution\nacross distant species shows wide dynamic range sequence conservation, \nreflects entire proteomes diverge time. hand, also\npresents two important drawbacks. First, functional information one\nspecies (e.g., protein abundance) implicitly extrapolated species,\nassumption frequently incorrect. Second, order \nmutations occur can hardly traced. example, considering gene\nduplication event occurred several million years ago, impossible \ndistinguish mutations occurred right duplication event \narose later. Remarkably, limitations resolved \nmeasuring evolution across population. Indeed, short evolutionary\ndistances seen across strains mean functional information can \nextrapolated high confidence, mutations can situated narrow\ntime-window. Thus, resolving limitations, integration \nevolutionary data across species strains (Figure 1.1)\nprovide new insights constraints biophysics (particular\nabundance) versus function place protein evolution.\nFigure 1.1: Integrating timescales protein evolution distant species populations\n","code":""},{"path":"proteomics-experiment.html","id":"proteomics-experiment","chapter":"2 Proteomics experiment","heading":"2 Proteomics experiment","text":"","code":""},{"path":"proteomics-experiment.html","id":"experiment-design","chapter":"2 Proteomics experiment","heading":"2.1 Experiment design","text":"experiment, selected eight strains population\n1,011 S. cerevisiae isolates, representing overall ecological, geographical\ngenetic diversity (Figure 2.1.eight strains grown synthetic defined media (SD). carefully monitored\nstrains growth harvest cells close mid-log phase (OD ~ 0.5). ,\nproceed wash samples PBS flash-freeze cell pellets \nwhole-lysate proteomics profiling.strains, prepared biological replicates originated two\ndistinct colonies two technical replicates.\nFigure 2.1: Phylogenetic tree 1011 cerevisiae isolates highlighting 8 strains used RNASeq/RiboSeq/proteomics exepriment\nAltogether 32 samples yeast cell pellets including 4 replicates\n(two biological two technical) sent Weizmann proteomics unit.\n(INPCM).samples submitted correspond 4mL cultures OD ranging 0.4-0.8.OD samples (table)","code":""},{"path":"proteomics-experiment.html","id":"sample-preparation","chapter":"2 Proteomics experiment","heading":"2.2 Sample preparation","text":"cell pellets subjected lysis solution tryptic digestion using\nS-Trap method (Protifi) followed solid phase extraction cleaning step (Oasis HLB).","code":""},{"path":"proteomics-experiment.html","id":"liquid-chromatography-mass-spectrometry","chapter":"2 Proteomics experiment","heading":"2.3 Liquid chromatography mass spectrometry","text":"resulting peptides analyzed using nanoflow liquid chromatography\n(nanoAcquity) coupled high resolution, high mass accuracy mass spectrometry\n(Thermo Exploris 480). sample analyzed instrument separately \nrandom order discovery mode.","code":""},{"path":"proteomics-experiment.html","id":"peptide-identification-and-quantification","chapter":"2 Proteomics experiment","heading":"2.4 Peptide identification and quantification","text":"Raw data processed MaxQuant v1.6.6.0. data searched \nAndromeda search engine database containing protein sequences \nSaccharomyces cerevisiae downloaded Uniprot.org, appended \ncommon lab protein contaminants.following modifications defined search:\nFixed modification- cysteine carbamidomethylation.\nVariable modifications- methionine oxidation protein N-terminal acetylation.quantitative comparisons calculated using Perseus v1.6.0.7.\nDecoy hits filtered proteins detected\nleast two replicates least one experimental group kept.","code":""},{"path":"proteomics-experiment.html","id":"loading-mass-spectrometry-results","chapter":"2 Proteomics experiment","heading":"2.5 Loading Mass Spectrometry Results","text":"First, read MaxQuant output file (CSV/XLSX format) containing hits.\nhit corresponds set peptides matched single protein group.\nNote: protein groups may contain one multiple identified proteins (including contaminants)Statistics proteomics hits:3635 total hits20 contaminants53 reversed sequences3562 proteins identified:\n3485 unique proteins\n77 multiple proteins (77 duplicated pairs)\n3485 unique proteins77 multiple proteins (77 duplicated pairs)proteomics experiment, large number proteins identified quantified.\nquantified cellular proteome roughly amounts half reference proteome sequences\nyeast S. cerevisiae S288C","code":"#> Total number of proteins hits: 3635\n#> Sample names:\n#>    1. AMH_1_1_12\n#>   2. AMH_1_2_10\n#>   3. AMH_2_1_12\n#>   4. AMH_2_2_12\n#>   5. BAN_1_1_12\n#>   6. BAN_1_2_10\n#>   7. BAN_2_1_10\n#>   8. BAN_2_2_10\n#>   9. BED_1_1_12\n#>  10. BED_1_2_10\n#>  11. BED_2_1_12\n#>  12. BED_2_2_10\n#>  13. BPL_1_1_10\n#>  14. BPL_1_2_12\n#>  15. BPL_2_1_10\n#>  16. BPL_2_2_12\n#>  17. BTT_1_1_12\n#>  18. BTT_1_2_10\n#>  19. BTT_2_1_12\n#>  20. BTT_2_2_12\n#>  21. CMP_1_1_10\n#>  22. CMP_1_2_12\n#>  23. CMP_2_1_10\n#>  24. CMP_2_2_10\n#>  25. CPI_1_1_12\n#>  26. CPI_1_2_10\n#>  27. CPI_2_1_12\n#>  28. CPI_2_2_12\n#>  29. CQC_1_1_10\n#>  30. CQC_1_2_12\n#>  31. CQC_2_1_10\n#>  32. CQC_2_2_10"},{"path":"data-processing.html","id":"data-processing","chapter":"3 Data processing","heading":"3 Data processing","text":"normalizing intensities, first need discard hits \nsuitable analysis:contaminants (identifier starts CON)reversed sequences (identifier starts REV)multiple hits (peptides matching several proteins)enough unique peptides (low confidence identification (< 2 peptides))","code":"\n# Filter hits\nms1=filter_hits(ms0)\n#> Discarding problematic hits...\n#> *   104 = less than 2 unique peptides\n#> *    20 = contaminated hits\n#> *    52 = reversed sequences\n#> *    57 = multi-protein hits\n#> -----------------------------------------\n#>  -> 206   hits eliminated\n#>  => 3429  remaining hits for analysis"},{"path":"data-processing.html","id":"processing-quantified-intensities","chapter":"3 Data processing","heading":"3.1 Processing quantified intensities","text":"Following aim experiment, wish compare variation protein\nexpression strains.First, compute average intensities replicates., discard proteins hits missing values XX strains YY replicates\ntypes media.Finally, normalize intensities transforming log2 subtracting\nsample’s median. (cf formula )Normalization method = Equalizing medians\\[ norm.int_{sample} = log2(raw.int_{sample}) - log2(median_{sample}) \\]\nfilter hits contains missing values either strains replicates","code":"\n# Process intensities\nint_raw= ms1 %>% dplyr::select(uniprot=majority_protein_i_ds,starts_with(\"lfq\")) %>% as.data.frame() %>% column_to_rownames('uniprot') %>% \n            rename_with(everything(),.fn =gsub, pattern='lfq_intensity_', replacement='') \n\n\nint_norm= normalize_intensities(int_raw) %>% \n          as.data.frame %>% rownames_to_column('uniprot') %>%\n          as_tibble() %>%\n          rename_with(everything(),.fn =gsub, pattern='lfq_intensity_', replacement='') %>% \n          rename_with(.fn = str_to_upper)\n#> Normalize intensities to the median...\n         \n# TRYING DIFFERENT NORMALIZATIONS SCHEME (NOT READY)\n#int_med_norm =  normalize_intensities(int_raw) \n# library(affy)\n# library(missForest)\n#int_raw_noNA = int_raw[complete.cases(int_raw),]\n#int_raw_imp.log10 = missForest(xmis = log10(int_raw),variablewise=T,verbose=T,\n#                         xtrue=log10(int_raw_noNA))\n\n#int_loess_norm = affy::normalize.loess(log10(int_raw),verbose = F,log.it = F)\n#nrow(int_loess_norm) - length(find_na_rows(int_loess_norm,as.indices = T))\n# head(int_loess_norm)\n# int_loess_norm = normalizeBetweenArrays(log10(int_raw),method = 'cyclicloess')\nlibrary(DEP)\n \n# int_loess_norm = normalizeCyclicLoess(log2(int_raw))\n# int_med_norm = normalizeMedianAbsValues(log2(int_raw))\n# int_q_norm = normalizeQuantiles(log2(int_raw))\n# int_vsn_norm = normalizeVSN(log2(int_raw))\n# par(mfrow=c(3,2))\n# boxplot(log2(int_raw))\n# boxplot(int_loess_norm)\n# boxplot(int_med_norm)\n# boxplot(int_q_norm)\n# boxplot(int_vsn_norm)\n\n#compare_exp(log2(int_raw),int_loess_norm, all=T)\n\n\nlong_int_norm = pivot_longer(int_norm , cols=-UNIPROT, values_to='log10_int',\n                             names_to = c('strain','bioR','techR','day'),\n                             names_pattern = \"([^_]+)_([^_]+)_([^_]+)_([^_]+)\") %>%\n                group_by(strain,UNIPROT) %>% mutate(na_rep = sum.na(log10_int))\n\n# Intensities across strains  (default is average)\nint_by_strain = pivot_wider(long_int_norm,\n              id_cols=UNIPROT,\n              names_from = 'strain',\n              names_glue = \"{strain}\",\n              values_from = \"log10_int\",\n              values_fn=mean_\n              )\n\nna_by_strain = pivot_wider(long_int_norm,\n              id_cols=UNIPROT,\n              names_from = c('strain'),\n              names_glue = \"na_rep_{strain}\",\n              values_from = \"log10_int\",\n              values_fn=sum.na\n              )\n\ndf_strains= left_join(int_by_strain,na_by_strain) %>% \n  rowwise %>%\n  mutate( na_strains = sum.na(c_across(cols = starts_with('lfq_int'))) )\n#> Joining, by = \"UNIPROT\"\n\nint_all = int_norm  %>% column_to_rownames('UNIPROT') %>% as.data.frame()\n\n# Removing hits with missing values for more than one strain (using average intensities over replicates)\nms2= df_strains %>% filter(na_strains < 1)\nint_filt_strains = ms2 %>% dplyr::select(-starts_with('na')) %>% column_to_rownames('UNIPROT') %>% as.data.frame()\n\n\n# Save processed & normalized intensities data\nwrite_delim(df_strains,here::here('output','proteomics-normalized-log10_intensities.tsv'),delim='\\t')"},{"path":"qc.html","id":"qc","chapter":"4 Quality control","heading":"4 Quality control","text":"","code":""},{"path":"qc.html","id":"boxplot-of-sample-raw-intensities","chapter":"4 Quality control","heading":"4.1 Boxplot of sample raw intensities","text":"Second, want inspect distribution peptide intensities strains.\naddition, also observe many replicates hit quantified.\n(#fig:boxplot-int_ub)Distribution expression ubiquitous hits (.e. detected strains)\naverage, peptide intensities increase hit found one replicateWe look hits quantified function number strains \nleast one peptide quantified. (non-ubiquitous hits)\nFigure 4.1: Distribution expression hits detected strains\nSimilarly, found lower peptide intensity hit found\nacross less strains. Nevertheless, almost two thirds hits detected strains.\n87% hits expressed across least 5 8 strains.","code":"#> \n#> Attaching package: 'kableExtra'\n#> The following object is masked from 'package:dplyr':\n#> \n#>     group_rows"},{"path":"qc.html","id":"number-of-missing-values-in-samples","chapter":"4 Quality control","heading":"4.2 Number of missing values in samples","text":"Furthermore, can check whether proportion missing values equally\ndistributed among samples.\nFigure 4.2: Number quantified intensities across samples\n","code":""},{"path":"qc.html","id":"compare-all-vs-all-expression","chapter":"4 Quality control","heading":"4.3 Compare all-vs-all expression","text":"","code":""},{"path":"qc.html","id":"scatterplots","chapter":"4 Quality control","heading":"4.3.1 Scatterplots","text":"","code":"\n# scatterplots between all samples\nscmat_all=draw_scatterplots(datain=int_all)\n#> Registered S3 method overwritten by 'GGally':\n#>   method from   \n#>   +.gg   ggplot2\nprint(scmat_all)"},{"path":"qc.html","id":"heatmap-correlation","chapter":"4 Quality control","heading":"4.3.2 Heatmap correlation","text":"heatmap correlations samples show high correlation expression\nreplicates strains:\n[0.824 - 0.992]expression 1st biological replicates strains CQC CMP seem\nslighlty less correlated samples.","code":"\n# heatmap correlation\ncs_all=compute_samples_correlation(int_all)\n#> Compute pairwise samples correlation (Spearman)...\n#> \n#> Correlation method: 'spearman'\n#> Missing treated using: 'pairwise.complete'\nCOR_RANGE = range( cs_all[row(cs_all) == (col(cs_all) - 1)] )\n\nby_sample = df.group %>% column_to_rownames(\"sample\")\nhm_all=draw_heatmap_samples(mcor = cs_all,df.group=by_sample,col.group = col.group)"},{"path":"qc.html","id":"principle-component-analysis","chapter":"4 Quality control","heading":"4.3.3 Principle Component Analysis","text":"Finally, PCA reveals distance sample.","code":"\nint_all_scaled = scale(int_all,center=T, scale = T)\nmake_pca(na.omit(int_all_scaled), with_labels=T,col_by_group=1:4)"},{"path":"strains-expression-comparison.html","id":"strains-expression-comparison","chapter":"5 Strains expression comparison","heading":"5 Strains expression comparison","text":"","code":""},{"path":"strains-expression-comparison.html","id":"scatterplots-1","chapter":"5 Strains expression comparison","heading":"5.1 Scatterplots","text":"Initially, can look scatterplots intensities -versus-samples.","code":"\n# scatterplots between strains\nscmat_strains=draw_scatterplots(datain=int_filt_strains)\nprint(scmat_strains)"},{"path":"strains-expression-comparison.html","id":"heatmap-correlation-1","chapter":"5 Strains expression comparison","heading":"5.2 Heatmap Correlation","text":"compute spearman rank correlations intensities samples.heatmap correlations show high correlation expression strains:\n[0.942 - 0.977]","code":"\n# heatmap correlation\ncs_strains=compute_samples_correlation(int_filt_strains)\n#> Compute pairwise samples correlation (Spearman)...\n#> \n#> Correlation method: 'spearman'\n#> Missing treated using: 'pairwise.complete'\nCOR_RANGE = range( cs_strains[row(cs_strains) == (col(cs_strains) - 1)] )\n\nhm_strains=draw_heatmap_samples(mcor = cs_strains,df.group=c(),col.group = col.group)"},{"path":"strains-expression-comparison.html","id":"principle-component-analysis-1","chapter":"5 Strains expression comparison","heading":"5.3 Principle Component Analysis","text":"Finally, PCA reveals distance sample.","code":"\nint_scaled_strains = scale(int_filt_strains,center=T, scale = T)\nmake_pca(na.omit(int_scaled_strains), with_labels=F,col_by_group=1:2)"},{"path":"differential-expression.html","id":"differential-expression","chapter":"6 Differential Expression","heading":"6 Differential Expression","text":"","code":"\nvolcano_data =  get_volcano_data(input_data=int_norm, which='both',\n                            min_lfc=2, min_pval=0.01, topn = 20)\n\ndf_limma = bind_rows(volcano_data) %>% as_tibble()\nvolcPlot(INPUT=int_norm, MIN_LFC=2, MIN_PVAL=0.01, WHICH='both', TOPN = 20)\n#> $`AMH-BAN`\n#> \n#> $`AMH-BED`\n#> \n#> $`AMH-BPL`\n#> \n#> $`AMH-BTT`\n#> \n#> $`AMH-CMP`\n#> \n#> $`AMH-CPI`\n#> \n#> $`AMH-CQC`\n#> \n#> $`BAN-BED`\n#> \n#> $`BAN-BPL`\n#> \n#> $`BAN-BTT`\n#> \n#> $`BAN-CMP`\n#> \n#> $`BAN-CPI`\n#> \n#> $`BAN-CQC`\n#> \n#> $`BED-BPL`\n#> \n#> $`BED-BTT`\n#> \n#> $`BED-CMP`\n#> \n#> $`BED-CPI`\n#> \n#> $`BED-CQC`\n#> \n#> $`BPL-BTT`\n#> \n#> $`BPL-CMP`\n#> \n#> $`BPL-CPI`\n#> \n#> $`BPL-CQC`\n#> \n#> $`BTT-CMP`\n#> \n#> $`BTT-CPI`\n#> \n#> $`BTT-CQC`\n#> \n#> $`CMP-CPI`\n#> \n#> $`CMP-CQC`\n#> \n#> $`CPI-CQC`\n\ndfe = subset(df_limma,sig!='Non significant')\n\ndown = dfe %>% group_by(ID) %>% dplyr::filter(sig=='Downregulated') %>%\n       summarize( strains_down = paste0(comparison,collapse=' '),\n                  down_AMH = str_count(strains_down,'AMH-'),\n                  down_BAN = str_count(strains_down,'BAN-'),\n                  down_BED = str_count(strains_down,'BED-'),\n                  down_BPL = str_count(strains_down,'BPL-'),\n                  down_BTT = str_count(strains_down,'BTT-'),\n                  down_CMP = str_count(strains_down,'CMP-'),\n                  down_CPI = str_count(strains_down,'CPI-'),\n                  down_CQC = str_count(strains_down,'CQC-'))\nup = dfe %>% group_by(ID) %>% dplyr::filter(sig=='Upregulated') %>%  \n      summarize( strains_up = paste0(comparison,collapse=' '),\n                  up_AMH = str_count(strains_up,'AMH-'),\n                  up_BAN = str_count(strains_up,'BAN-'),\n                  up_BED = str_count(strains_up,'BED-'),\n                  up_BPL = str_count(strains_up,'BPL-'),\n                  up_BTT = str_count(strains_up,'BTT-'),\n                  up_CMP = str_count(strains_up,'CMP-'),\n                  up_CPI = str_count(strains_up,'CPI-'),\n                  up_CQC = str_count(strains_up,'CQC-'))\n\n# Number of times a hit is differentially expressed\ndf_dfe = dfe %>% left_join(janitor::tabyl(dfe,ID,sig)) %>%\n         left_join(down) %>% left_join(up) %>%\n         rename(uniprot=ID) %>% \n         group_by(uniprot,comparison) %>% \n        mutate( n_strains_up = sum(c_across(starts_with('up_')) !=0 ),\n                n_strains_down = sum(c_across(starts_with('down_'))!=0)) %>%\n        replace_na(list(n_strains_up=0,n_strains_down=0)) %>%\n        left_join(evo_yeast, by=c('uniprot'='UNIPROT')) \n#> Joining, by = \"ID\"\n#> Joining, by = \"ID\"\n#> Joining, by = \"ID\"\n  \n\ndf_dfe_annot = df_dfe %>%\n          left_join(sc_annotation_orf,by=c('uniprot'='UNIPROT')) %>%\n  mutate(uniprot_link = paste0(\"<a href='https://www.uniprot.org/uniprot/\",uniprot,\"'>\",uniprot,\"<\/a>\"),\n         sgd_link = paste0(\"<a href='https://www.yeastgenome.org/locus/\",SGD,\"'>\",SGD,\"<\/a>\"),\n         regulated = Downregulated+Upregulated) %>% \n  dplyr::relocate(uniprot,uniprot_link,sgd_link,regulated,Downregulated,Upregulated, \n                  GENENAME,ORF,PNAME,'FUNCTION','BIOPROCESS_all','ORTHO','OTHER')\n\nlibrary(kableExtra)\nlibrary(formattable)\n#> \n#> Attaching package: 'formattable'\n#> \n#> The following object is masked _by_ '.GlobalEnv':\n#> \n#>     percent\n#> \n#> The following object is masked from 'package:plotly':\n#> \n#>     style\n#> \n#> The following object is masked from 'package:BiocGenerics':\n#> \n#>     normalize\nlibrary(DT)\n\nft_dt = df_dfe_annot %>% \n  formattable(\n    list(\n      `Downregulated` = color_tile(\"white\", \"red\"),\n      `Upregulated` = color_tile(\"white\", \"blue\"),\n      `regulated` = color_tile(\"white\", \"gray\")\n    )\n) %>% as.datatable(\n        options = list(\n            fixedHeader=T,\n            paging = TRUE, pageLength = 20,  ## paginate the output and #rows for each page\n            scrollY = TRUE,   ## enable scrolling on X/Y axis\n            #autoWidth = TRUE, ## use smart column width handling\n            server = FALSE,   ## use client-side processing\n            dom = 'Bfrtip', buttons = list('csv', 'excel', list(extend = 'colvis')),\n            fixedColumns = list(leftColumns = 2),\n            columnDefs = list(list(visible=FALSE, targets=c(42:48)))\n          ),\n  extensions = c('FixedHeader','FixedColumns','Buttons'),\n  selection = 'single',           ## enable selection of a single row\n  filter = 'bottom',              ## include column filters at the bottom\n  rownames = FALSE                ## don't show row numbers/names\n) %>% \n   formatStyle(columns = 1:30, target= 'row',lineHeight='100%', `font-size` = '12px')\n\nft_dt"},{"path":"differential-expression.html","id":"functional-map-for-diffentially-expressed-genes","chapter":"6 Differential Expression","heading":"6.1 Functional map for diffentially expressed genes","text":"","code":"\nlibrary(treemap)\nlibrary(d3Tree)\n\ntreemap(df_dfe_annot, index=c(\"BIOPROCESS_all\", \"comparison\"), vSize='regulated', vColor=\"EffectSize\", type=\"value\") \ntreemap(df_dfe_annot, index=c(\"BIOPROCESS_all\", \"GENENAME\"), vSize=\"regulated\", vColor=\"EffectSize\", type=\"value\",)"},{"path":"session-info.html","id":"session-info","chapter":"7 Session Info","heading":"7 Session Info","text":"","code":""},{"path":"session-info.html","id":"platform-info","chapter":"7 Session Info","heading":"7.1 Platform info","text":"\nTable 7.1: (Reproducibility - platform info)\n","code":"\ndf_platform = devtools::session_info()$platform %>% \n  unlist(.) %>% \n  as.data.frame(.) %>% \n  rownames_to_column(.)\n\nkable(\n  df_platform,\n  booktabs = T, \n  align = \"l\",\n  caption = \"(Reproducibility - platform info)\", # complete caption for main document\n  caption.short = \" \" # \n)"},{"path":"session-info.html","id":"packages-loaded-and-used-i.e.-attached-to-the-workspace","chapter":"7 Session Info","heading":"7.2 Packages loaded and used (i.e. attached to the workspace)","text":"\nTable 7.2: (Reproducibility - loaded packages)\nreproduce Rmarkdown document, may need run following lines\nloading/installing necessary packages:Copy paste code rsession:install.packages(‘xfun’)xfun::pkg_load2(c(“BiocGenerics,” “BiocManager,” “Biostrings,” “corrr,” “cowplot,” “d3Tree,” “DEP,” “dplyr,” “DT,” “forcats,” “formattable,” “GenomeInfoDb,” “GGally,” “ggcorrplot,” “ggplot2,” “ggplotify,” “ggpubr,” “ggrepel,” “ggsci,” “ggtext,” “ggthemes,” “gridExtra,” “hablar,” “,” “hrbrthemes,” “hutils,” “IRanges,” “janitor,” “kableExtra,” “limma,” “openxlsx,” “plotly,” “purrr,” “RColorBrewer,” “RCurl,” “readr,” “rio,” “S4Vectors,” “see,” “sessioninfo,” “stringr,” “tibble,” “tictoc,” “tidyr,” “tidyverse,” “treemap,” “xfun,” “XVector”))Pay attention error message might get.Common errors due :admin privileges write home R directorySome package installation requires prior linux libraries installedSome packages might available older R versionSome packages obtained CRAN Bioconductor (may require use function BiocManager::install())","code":""},{"path":"session-info.html","id":"all-packages-required-i.e.-including-dependencies","chapter":"7 Session Info","heading":"7.3 All packages required (i.e. including dependencies)","text":"\nTable 7.3: packages used (include dependencies)\n","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"Drummond, D. ., Raval, . & Wilke, C. O. single determinant dominates rate yeast protein evolution. Mol. Biol. Evol. 23, 327–337 (2006).Drummond, D. . & Wilke, C. O. Mistranslation-induced protein misfolding dominant constraint coding-sequence evolution. Cell 134, 341–352 (2008).Drummond, D. ., Bloom, J. D., Adami, C., Wilke, C. O. & Arnold, F. H. highly expressed proteins evolve slowly. Proc. Natl. Acad. Sci. U. S. . 102, 14338–14343 (2005).Pal, C., Papp, B. & Hurst, L. D. Highly expressed genes yeast evolve slowly. Genetics 158, 927–931 (2001).Jimenez, M. J., Arenas, M. & Bastolla, U. Substitution rates predicted stability-constrained models protein evolution consistent empirical data. Mol. Biol. Evol. (2017). doi:10.1093/molbev/msx327Schavemaker, P. E., Śmigiel, W. M. & Poolman, B. Ribosome surface properties may impose limits nature cytoplasmic proteome. Elife 6, (2017).Yang, J. R., Liao, B. Y., Zhuang, S. M. & Zhang, J. Z. Protein misinteraction avoidance causes highly expressed proteins evolve slowly. Proc. Natl. Acad. Sci. U. S. . 109, E831–E840 (2012).Plata, G. & Vitkup, D. Avoidance toxic misfolding protein stability explain sequence constraints highly expressed proteins. Mol. Biol. Evol. (2017). doi:10.1093/molbev/msx323","code":""}]
