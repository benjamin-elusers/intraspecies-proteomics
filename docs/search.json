[{"path":"index.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"","code":""},{"path":"index.html","id":"about","chapter":"1 Introduction","heading":"1.1 About","text":"project results collaboration groups E. Levy (Weizmmann, IL)\nJ. Schacherer (CNRS/Univ. Strasbourg).","code":""},{"path":"index.html","id":"abstract","chapter":"1 Introduction","heading":"1.2 Abstract","text":"Cells proteomes constantly evolve adapt survive wide\nvariety ecological niches. phenotypic diversity arises populations\nrelatively short timescales (1 100s thousand years), longer timescales (1\n100s million years) involved divergence species. \nsignatures evolutionary processes carved every single\nprotein sequence accumulation mutations, thereby reshaping cell\nmachineries, including protein complexes, signaling pathways, metabolic\npathways example.Interestingly, long timescales, different proteins accumulate mutations \nmarkedly different rates. example, orthologous proteins S. cerevisiae \nS. pombe share 42% (+/- 14%) sequence identity average, orthologs\nexhibit higher conservation. example, actins share 89.7% sequence identity,\nillustrating proteins tolerate mutations others. One\nbiophysical property correlates sequence divergence \nprotein abundance. abundant protein, conserved \nsequence. abundance-conservation correlation well established,\nmechanistic origin well understood. Toxicity associated \nmutation-induced misfolding suggested possible origin, recent\nworks, including (Dubreuil et al. 2019) show unlikely\nmain driving mechanism.resolve mechanisms shaping protein evolution, propose integrate\nanalyses sequence evolution across timescales. one hand, evolution\nacross distant species shows wide dynamic range sequence conservation, \nreflects entire proteomes diverge time. hand, also\npresents two important drawbacks. First, functional information one\nspecies (e.g., protein abundance) implicitly extrapolated species,\nassumption frequently incorrect. Second, order \nmutations occur can hardly traced. example, considering gene\nduplication event occurred several million years ago, impossible \ndistinguish mutations occurred right duplication event \narose later. Remarkably, limitations resolved \nmeasuring evolution across population. Indeed, short evolutionary\ndistances seen across strains mean functional information can \nextrapolated high confidence, mutations can situated narrow\ntime-window. Thus, resolving limitations, integration \nevolutionary data across species strains (Figure 1.1)\nprovide new insights constraints biophysics (particular\nabundance) versus function place protein evolution.\nFigure 1.1: Integrating timescales protein evolution distant species populations\n","code":""},{"path":"transcriptomics.html","id":"transcriptomics","chapter":"2 Transcriptomics","heading":"2 Transcriptomics","text":"","code":""},{"path":"transcriptomics.html","id":"summary","chapter":"2 Transcriptomics","heading":"2.1 Summary","text":"evolution, mutations arise genomes, potentially affecting every gene\nprotein every site time. Degrees sequence divergence within\npopulations species reflect interplay several\ninterconnected constraints (e.g., genomic, transcriptional, functional,\nbiophysical, structural, environmental…) underlie phenotypic diversity \norganism fitness. Protein expression main determinant protein’s\nsequence conservation (e.g., gene expressed, sequence\nconserved). Although expression-conservation correlation well\nestablished, mechanistic origin well understood.perspective, analyzing variation gene expression across every layer\nreveal key processes driving evolution among several yeast (S. cerevisiae)\nisolates sharing almost identical genetic background, except \nnewly acquired mutations, notably protein-coding genes (e.g. Single\nNucleotide Variations).Gene expression multi-layered phenomenon variations occur\ndifferently step protein synthesis life\n(transcription, translation protein abundance). exploration \nsteps therefore essential define constraints affecting \nfinal protein abundance. Given , sought understand individuals\ndiffer terms translational regulation translational variation\nrelated transcriptional variation.Therefore, performed joint exploration RNA-seq, ribosome proteomics\nprofiling 8 natural Saccharomyces cerevisiae yeast isolates \nwidely diverse genetic ecologic origins. found evolutionary\nconstraints gene expression showed different magnitudes depending \nexpression layer. Specifically, expression variations tended 10% lower \ntranslational level, related phenomenon called\npost-transcriptional buffering. phenomenon likely affect \nspecific genes essential genes well genes related protein\ncomplexes. Surprisingly, genes preferentially affected \npost-transcriptional buffering tended less expressed genes \naffected phenomenon. Together, results highlight variations\ngene expression shaped differently depending expression level \nmultiple factors, including certain functional physical constraints. \nalso collecting proteomics data 8 isolates, allow us\nassess high confidence balance biophysics (particular\nabundance) versus function protein evolution.","code":""},{"path":"transcriptomics.html","id":"our-datasets","chapter":"2 Transcriptomics","heading":"2.2 Our datasets","text":"RNA-seq & Ribo-seq 8 natural isolates Saccharomyces cerevisiaeWe performed ribosome profiling RNA sequencing eight S. cerevisiae\nnatural isolates coming diverse ecological environments \ngenetically strongly different (Peter et al.,2018).\nisolates cultivated Synthetic Complete (SC) mid-log phase,\nharvested flash-frozen. RNA-seq Ribo-seq experiment performed \ncollaboration Riken institute Japan.data encompassed 3755 genes. data normalized using TPM\nnormalization gene isolate, divided raw count \nORF length applied per million factor (total read count /\n1,000,000)also calculated Translation efficiency value correspond, \ngene isolate, Ribo-seq TPM value divided RNA-seq TPM\nvalue. brief, represents well transcript used \ntranslation.","code":"\n## Our dataset\nisolates = c('CPI','CMP','AMH','CQC','BPL','BTT','BED','BAN')\nRNA_seq_data = readRDS(here(\"data\",'RNA_seq.RDS'))\nRibo_seq_data = readRDS(here(\"data\",'Ribo_seq.RDS'))\nn = nrow(RNA_seq_data)\nstrains = fread(here(\"data\",'strains.csv'),data.table = F)\nstrains = strains[strains$`Standardized name`%in%isolates,c(1,2,3,4,9,10,11,16)]\nlibrary(DT)\ndatatable(strains, rownames = FALSE, caption = NULL,\n               filter = \"top\", escape = FALSE, style = \"default\",\n               width = NULL, height = NULL)\n\np1= ggcorr(RNA_seq_data ,method = c(\"everything\", \"spearman\"), label = T, label_round = 2, midpoint = 0.75, limits = c(0.6,1), size = 2)+\n  ggtitle('RNA-seq correlation matrix')\np2=ggcorr(Ribo_seq_data ,method = c(\"everything\", \"spearman\"), label = T, label_round = 2, midpoint = 0.75, limits = c(0.6,1), size = 2)+\n  ggtitle('Ribo-seq correlation matrix')\n\ngrid.arrange(p1,p2, ncol=2)"},{"path":"transcriptomics.html","id":"overlap-with-proteomic","chapter":"2 Transcriptomics","heading":"2.3 Overlap with proteomic","text":"proteomic data encompassed 3429 genes. overlap two datasets encompassed 2632 (several filtration missing values). data different data sets needed normalized can studied together (see graph ). therefore performed quantile normalization obtain equally distributed data (see )","code":"\n\nproteomic_WIS2 = fread(here::here('output','median-normalized.txt'), data.table = F)\nn = nrow(proteomic_WIS2)\na = fread(here::here('output','proteomics-normalized-log10_intensities.tsv'))\nrownames(proteomic_WIS2)= a$UNIPROT\n\nprot_gene_name = fread(here::here('output','test.csv'), fill = T, data.table = F) %>% \n                  mutate(Chromosome = recode(Chromosome,'(3)'=V8) ) %>% \n                  dplyr::select(-V8) %>%\n                  dplyr::filter(!duplicated(prot_names))\n                  \n\n# Calculate mean of normalized intensity per strain\nint_strains = pivot_longer(proteomic_WIS2 %>% rownames_to_column('uniprot'), \n             -uniprot, values_to='int2use',\n                       names_to = c('strain','bio','tech','day'),\n                       names_pattern = \"([^_]+)_([^_]+)_([^_]+)_([^_]+)\") %>% \n      group_by(uniprot,strain=toupper(strain)) %>% summarize( mean_int = mean_(int2use)) %>%\n      pivot_wider(id_cols=uniprot, names_from = strain, names_glue = \"{strain}\", values_from = mean_int )\n\nproteomic_WIS_mean_filtered = data.frame(int_strains) %>% \n                      drop_na %>% \n                      dplyr::filter(uniprot %in% prot_gene_name$prot_names) %>% \n                      left_join(prot_gene_name[,c('prot_names','ID')], by=c('uniprot'='prot_names'))\n\nall_exp = proteomic_WIS_mean_filtered %>% \n  inner_join(RNA_seq_data %>% rownames_to_column('ID'), by ='ID', suffix=c('_Prot','')) %>% \n  inner_join(Ribo_seq_data %>% rownames_to_column('ID'), by ='ID', suffix=c('_RNA','_Ribo'))\n\n\nlog2_all_exp= all_exp %>% column_to_rownames('ID') %>%\n              # transform to log2 to RNA and Ribo (already done for normalized proteomics)\n              mutate( across( ends_with(c('_RNA','_Ribo')), .fns = log2) ) %>%\n              select(where(is.numeric))\nboxplot(log2_all_exp,las=2,ylab='Gene expression (log2)')\ndf_rank <- apply(log2_all_exp,2,rank,ties.method=\"min\") \ndf_sorted <- data.frame(apply(log2_all_exp, 2, sort))\ndf_mean <- apply(df_sorted, 1, mean)\nindex_to_mean <- function(my_index, my_mean){\n  return(my_mean[my_index])\n}\n\nlog2_all_exp_norm <- apply(df_rank, 2, index_to_mean, my_mean=df_mean) %>% as_tibble\nrownames(log2_all_exp_norm) = rownames(log2_all_exp)\nboxplot(log2_all_exp_norm,las=2, ylab='Normalized gene expression (log2)', title='Quantile-normalized gene expression across RNA/Ribo/Proteomics')"},{"path":"post-transcriptional-buffering.html","id":"post-transcriptional-buffering","chapter":"3 Post transcriptional buffering","heading":"3 Post transcriptional buffering","text":"post-transcriptional buffering (PTB) phenomenon transcriptional variations tend buffered expression process progresses (add ref). observed different situations… completedIt possible detect phenomenon different ways:","code":""},{"path":"post-transcriptional-buffering.html","id":"correlation-between-isolate","chapter":"3 Post transcriptional buffering","heading":"3.1 Correlation between isolate","text":"Using quantile normalized data, performed Spearman correlation isolate profile expression level separately (using median value replicate proteomic data)Comparing correlation values, reveals profiles tended similar expression process progresses (increasing correlation coefficient values), bringing first proof presence phenomenon across 8 isolates.","code":"\nlibrary(corrr)\ncor_prot= select(log2_all_exp_norm, ends_with('_Prot')) %>%  correlate(method = 'sp') %>% column_to_rownames('term')\n#> \n#> Correlation method: 'sp'\n#> Missing treated using: 'pairwise.complete.obs'\ncor_rna= select(log2_all_exp_norm, ends_with('_RNA')) %>%  correlate(method = 'sp') %>% column_to_rownames('term')\n#> \n#> Correlation method: 'sp'\n#> Missing treated using: 'pairwise.complete.obs'\ncor_ribo= select(log2_all_exp_norm, ends_with('_Ribo')) %>%  correlate(method = 'sp') %>% column_to_rownames('term')\n#> \n#> Correlation method: 'sp'\n#> Missing treated using: 'pairwise.complete.obs'\n\ncor_exp= tibble(RNA = cor_rna[lower.tri(cor_rna)],\n                Ribo = cor_ribo[lower.tri(cor_ribo)],\n                Prot = cor_prot[lower.tri(cor_prot)])\ndf_cor_exp = pivot_longer(cor_exp, everything()) %>% \n              arrange(name) %>% mutate(experiment = factor(name))\npair_exp = unique(df_cor_exp$experiment) %>% as.character() %>% combn(m = 2) %>% as_tibble()\n\nggplot(df_cor_exp,aes(x=experiment, y=value,fill=experiment))+\n  geom_boxplot()+\n  theme_classic()+\n  xlab('')+\n  ylab('Rho')+\n  stat_compare_means(comparisons =pair_exp)"},{"path":"post-transcriptional-buffering.html","id":"variation-quantification","chapter":"3 Post transcriptional buffering","heading":"3.2 Variation quantification","text":"also possible explore PTB quantifying variation pairwise comparison. Basically, gene isolate pairwise comparison, use absolute value log2 transformed fold represent intensity expression variation 2 isolates. value increases, gene displays variable regulation isolate.calculated value pairwise comparison, gene expression level. found intensities variations decreasing long expression process progresses, supporting presence PTB phenomenon dataset.","code":"\n#remotes::install_github(\"TimTeaFan/dplyover\")\nlibrary(dplyover)\n# calculate fold change pairwise for each experiment\nfc_prot = select(log2_all_exp_norm,ends_with('_Prot')) %>% \n  rename_with(.fn=str_remove_all,pattern = \"_Prot\") %>%\n  transmute(across2x(everything(), everything(),.fns = ~foldchange(.x,.y),.comb = 'minimal'),\n            experiment='Prot')%>% \n  pivot_longer(-experiment,names_to='pair',values_to = 'fc')\nfc_rna = select(log2_all_exp_norm,ends_with('_RNA')) %>% \n  rename_with(.fn=str_remove_all,pattern = \"_RNA\") %>%\n  transmute(across2x(everything(), everything(),.fns = ~foldchange(.x,.y),.comb = 'minimal'),\n            experiment='RNA')%>% \n  pivot_longer(-experiment,names_to='pair',values_to = 'fc')\nfc_ribo = select(log2_all_exp_norm,ends_with('_Ribo')) %>% \n  rename_with(.fn=str_remove_all,pattern = \"_Ribo\") %>%\n  transmute(across2x(everything(), everything(),.fns = ~foldchange(.x,.y),.comb = 'minimal'),\n            experiment='Ribo') %>% \n  pivot_longer(-experiment,names_to='pair',values_to = 'fc')\n\n# combine all pairwise foldchange\nfc_exp = bind_rows(fc_prot,fc_rna,fc_ribo) %>% arrange(experiment,pair)\n\npair_exp=unique(fc_exp$experiment) %>% as.character() %>% combn(m = 2) %>% as_tibble()\n\nggplot(fc_exp,aes(experiment, log2(fc), fill=experiment))+\n  geom_boxplot()+\n  scale_y_log10()+\n  stat_compare_means(comparisons = pair_exp)+\n  theme_classic()+\n  xlab('')+\n  ylab('|log2(FC)|')"},{"path":"post-transcriptional-buffering.html","id":"euclidean-distances-between-the-profiles","chapter":"3 Post transcriptional buffering","heading":"3.3 Euclidean distances between the profiles","text":"Euclidean distances can also give information variable datasets can . used quantile normalized data calculate Euclidean distances profile expression level.Consistently previous results, found distances lower lower expression process progresses, suggesting expression variations decreased. also supported presence PTB phenomenon","code":"\n# dist_exp = log2_all_exp_norm %>% add_column(id=all_exp$ID) %>%\n#   pivot_longer(cols = -id,\n#                names_to = c('strain','experiment'), \n#                names_pattern = '(.+)_(.+)', \n#                values_to = 'exp') %>% \n#   pivot_wider(id_cols = c('id','experiment'),names_from='strain', values_from = 'exp') %>%\n#   group_by(experiment) %>% \n#   mutate( across2x(AMH:CQC, AMH:CQC, .fns =dist, method= 'euclidean', .comb = 'minimal'))     \n#            \n\nb=lapply(c('RNA','Ribo','Prot'), function(i){\n  i<<-i\n  a = log2_all_exp_norm[,grep(i, colnames(log2_all_exp_norm))]\n  a = dist(t(a))\n  a = as.matrix(a)\n  a= a[lower.tri(a)]\n  return(a)\n})\nnames(b)=  c('RNA','Ribo','Prot')\nb=as.data.frame(b)\nb = melt(b)\n#> No id variables; using all as measure variables\n\npair_exp=unique(b$variable) %>% as.character() %>% combn(m = 2) %>% as_tibble()\n\nggplot(b,aes(x=variable,y=value, fill=variable))+\n  geom_boxplot()+\n  theme_classic()+\n  ylab('Euclidean distance')+\n  xlab('')+\n  stat_compare_means(comparisons = pair_exp)"},{"path":"post-transcriptional-buffering.html","id":"variance-comparison","chapter":"3 Post transcriptional buffering","heading":"3.4 Variance comparison","text":"simple variance calculation can also give clue variation intensity gene expression. calculated variance dataset gene found tended higher transcription level, lower protein abundance level (translation level middle), accordance previous exploration","code":"\n\na=lapply(c('RNA','Ribo','Prot'), function(i){\n  i<<-i\n  a = log2_all_exp_norm[,grep(i, colnames(log2_all_exp_norm))]\n  a=apply(a,1 ,var)\n  return(a)\n})\nnames(a)= c('RNA','Ribo','Prot') \na =as.data.frame(a)\nb=a\nb = melt(b)\n#> No id variables; using all as measure variables\n\npair_exp=unique(b$variable) %>% as.character() %>% combn(m = 2) %>% as_tibble()\n\nggplot(b,aes(x=variable,y=value, fill=variable))+\n  geom_boxplot()+\n  theme_classic()+\n  ylab('Variance')+\n  xlab('')+\n  stat_compare_means(comparisons = pair_exp)+\n  scale_y_log10()"},{"path":"proteomics-experiment.html","id":"proteomics-experiment","chapter":"4 Proteomics experiment","heading":"4 Proteomics experiment","text":"","code":""},{"path":"proteomics-experiment.html","id":"experiment-design","chapter":"4 Proteomics experiment","heading":"4.1 Experiment design","text":"experiment, selected eight strains population\n1,011 S. cerevisiae isolates, representing overall ecological, geographical\ngenetic diversity (Figure 4.1.eight strains grown synthetic defined media (SD). carefully monitored\nstrains growth harvest cells close mid-log phase (OD ~ 0.5). ,\nproceed wash samples PBS flash-freeze cell pellets \nwhole-lysate proteomics profiling.strains, prepared biological replicates originated two\ndistinct colonies two technical replicates.\nFigure 4.1: Phylogenetic tree 1011 cerevisiae isolates highlighting 8 strains used RNASeq/RiboSeq/proteomics exepriment\nAltogether 32 samples yeast cell pellets including 4 replicates\n(two biological two technical) sent Weizmann proteomics unit.\n(INPCM).samples submitted correspond 4mL cultures OD ranging 0.4-0.8.OD samples (table)","code":""},{"path":"proteomics-experiment.html","id":"sample-preparation","chapter":"4 Proteomics experiment","heading":"4.2 Sample preparation","text":"cell pellets subjected lysis solution tryptic digestion using\nS-Trap method (Protifi) followed solid phase extraction cleaning step (Oasis HLB).","code":""},{"path":"proteomics-experiment.html","id":"liquid-chromatography-mass-spectrometry","chapter":"4 Proteomics experiment","heading":"4.3 Liquid chromatography mass spectrometry","text":"resulting peptides analyzed using nanoflow liquid chromatography\n(nanoAcquity) coupled high resolution, high mass accuracy mass spectrometry\n(Thermo Exploris 480). sample analyzed instrument separately \nrandom order discovery mode.","code":""},{"path":"proteomics-experiment.html","id":"peptide-identification-and-quantification","chapter":"4 Proteomics experiment","heading":"4.4 Peptide identification and quantification","text":"Raw data processed MaxQuant v1.6.6.0. data searched \nAndromeda search engine database containing protein sequences \nSaccharomyces cerevisiae downloaded Uniprot.org, appended \ncommon lab protein contaminants.following modifications defined search:\nFixed modification- cysteine carbamidomethylation.\nVariable modifications- methionine oxidation protein N-terminal acetylation.quantitative comparisons calculated using Perseus v1.6.0.7.\nDecoy hits filtered proteins detected\nleast two replicates least one experimental group kept.","code":""},{"path":"proteomics-experiment.html","id":"loading-mass-spectrometry-results","chapter":"4 Proteomics experiment","heading":"4.5 Loading Mass Spectrometry Results","text":"First, read MaxQuant output file (CSV/XLSX format) containing hits.\nhit corresponds set peptides matched single protein group.\nNote: protein groups may contain one multiple identified proteins (including contaminants)Statistics proteomics hits:3635 total hits20 contaminants53 reversed sequences3562 proteins identified:\n3485 unique proteins\n77 multiple proteins (77 duplicated pairs)\n3485 unique proteins77 multiple proteins (77 duplicated pairs)proteomics experiment, large number proteins identified quantified.quantified cellular proteome roughly amounts half reference proteome sequences\nyeast S. cerevisiae S288C close 70% cytoplasmic proteins\ndetectable MS-profiling whole-cell lysate.","code":"#> Total number of proteins hits: 3635"},{"path":"data-processing.html","id":"data-processing","chapter":"5 Data processing","heading":"5 Data processing","text":"normalizing intensities, first need discard hits \nsuitable analysis:contaminants (identifier starts CON)reversed sequences (identifier starts REV)multiple hits (peptides matching several proteins)enough unique peptides (low confidence identification (< 2 peptides))","code":"\n# Filter hits\nms1=filter_hits(ms0)\n#> Discarding problematic hits...\n#> *   104 = less than 2 unique peptides\n#> *    20 = contaminated hits\n#> *    52 = reversed sequences\n#> *    57 = multi-protein hits\n#> -----------------------------------------\n#>  -> 206   hits eliminated\n#>  => 3429  remaining hits for analysis\n\nint_raw=read_maxquant(MAXQUANT.files$proteinGroups, zero.to.na = T, int_type = 'Intensity', pep_type = 'Unique peptides') %>% \n  filter_hits(verbose = F) %>% \n  dplyr::select(uniprot=majority_protein_i_ds,starts_with(\"intensity_\")) %>% \n            #mutate(across(where(is.integer64), ~as.integer(.))) %>% # make sure to use numeric and not integer\n            as.data.frame() %>% column_to_rownames('uniprot') %>%\n            rename_with(everything(),.fn=gsub, pattern='intensity_', replacement='') %>%\n            rename_with(.fn = str_to_upper)\n#> Total number of proteins hits: 3635"},{"path":"data-processing.html","id":"processing-quantified-intensities","chapter":"5 Data processing","heading":"5.1 Processing quantified intensities","text":"Following aim experiment, wish compare variation protein\nexpression strains.First, compute average intensities replicates., discard proteins hits missing values XX strains YY replicates\ntypes media.Finally, normalize intensities transforming log2 subtracting\nsample’s median. (cf formula )Normalization method = Equalizing medians\\[ norm.int_{sample} = log2(raw.int_{sample}) - log2(median_{sample}) \\]\nfilter hits contains missing values either strains replicates","code":"\n# Process intensities\nis.integer64 <- function(x) inherits(x, \"integer64\")\n\nint_lfq = ms1 %>% dplyr::select(uniprot=majority_protein_i_ds,starts_with(\"lfq\")) %>% \n            #mutate(across(where(is.integer64), ~as.integer(.))) %>% # make sure to use numeric and not integer\n            as.data.frame() %>% column_to_rownames('uniprot') %>%\n            rename_with(everything(),.fn=gsub, pattern='lfq_intensity_', replacement='') %>%\n            rename_with(.fn = str_to_upper)\n            \n\nint_md_norm = center_intensities(int_lfq, center='median', tolog2=T) %>% \n          as.data.frame() %>%\n          rename_with(everything(),.fn =gsub, pattern='lfq_intensity_', replacement='') %>% \n          rename_with(.fn = str_to_upper)\n#> Normalize log2-transformed intensities by the samples  median ...\n         \n# TRYING DIFFERENT NORMALIZATIONS SCHEME (NOT READY)\nINT_NORM = normalize_intensities(int = int_raw, design = df.group)\n#> Input data checked. All fields are valid.\n#> Sample check: More than one sample group found\n#> Sample replication check: All samples have replicates\n#> No RT column found, skipping RT processing\n#> No RT column specified (column named 'RT') or option not specified Skipping RT normalization.\nTAB_NORM = kbl(names(INT_NORM@normalizations),row.names = T,col.names = 'Normalizations:',position = 'left') %>% \n            kable_paper(\"striped\", full_width = F) %>% \n            kable_styling(position='left')  \n\n            \nint_norm = int_md_norm %>% rownames_to_column('uniprot') \nint_norm_ids = int_norm %>% dplyr::left_join(sc_identifiers,by=c('uniprot'='UNIPROT')) \n#compare_exp(log2(int_raw),int_loess_norm, all=T)\n\nlong_int_norm = pivot_longer(int_norm  , cols=-uniprot, values_to='int2use',\n                             names_to = c('strain','bio','tech','day'),\n                             names_pattern = \"([^_]+)_([^_]+)_([^_]+)_([^_]+)\") %>%\n                group_by(strain,uniprot) %>% mutate(na_rep = sum.na(int2use))\n\n# Intensities across strains  (default is average)\nint_by_strain = pivot_wider(long_int_norm ,\n              id_cols=uniprot,\n              names_from = 'strain',\n              names_glue = \"{strain}\",\n              values_from = \"int2use\",\n              values_fn=mean_\n              )\n\nna_by_strain = pivot_wider(long_int_norm,\n              id_cols=uniprot,\n              names_from = c('strain'),\n              names_glue = \"na_rep_{strain}\",\n              values_from = \"int2use\",\n              values_fn=sum.na\n              )\n\ndf_strains= left_join(int_by_strain,na_by_strain) %>% \n  rowwise %>%\n  mutate( na_strains = sum.na(c_across(cols = starts_with('lfq_int'))) )\n#> Joining, by = \"uniprot\"\n\nint_all = int_norm  %>% column_to_rownames('uniprot') %>% as.data.frame()\n\n# Removing hits with missing values for more than one strain (using average intensities over replicates)\nms2= df_strains %>% filter(na_strains < 1)\nint_filt_strains = ms2 %>% dplyr::select(-starts_with('na')) %>% column_to_rownames('uniprot') %>% as.data.frame()\n\n# Save processed & normalized intensities data\n#write_rds(df_strains,here::here('output',sprintf(\"%02d-normalized-intensities.rds\",chap_cur)))"},{"path":"qc.html","id":"qc","chapter":"6 Quality control","heading":"6 Quality control","text":"First, retrieve LFQ-intensities protein hit (label-free quantitation).","code":"\n# get lfq-peptide intensities (lfq=label-free quantitation) \nintensities = ms1 %>% dplyr::select(uniprot=majority_protein_i_ds,starts_with(\"lfq\")) \n# Convert intensities to long format \nlong_int_all = get_long_intensities(intensities) %>% mutate(int2use = log10_int)"},{"path":"qc.html","id":"total-sample-intensities","chapter":"6 Quality control","heading":"6.1 Total sample intensities","text":"\n(#fig:tot_int)Total intensities per sample\n","code":"#> Joining, by = \"sample\""},{"path":"qc.html","id":"boxplot-of-sample-raw-intensities","chapter":"6 Quality control","heading":"6.2 Boxplot of sample raw intensities","text":"want inspect distribution peptide intensities strains.\naddition, also observe many replicates hit quantified.distribution peptide intensities strains show strong differences expression:\n(#fig:boxplot-int_ub)Distribution expression ubiquitous hits (.e. detected strains)\naverage, peptide intensities higher hit found one replicate","code":""},{"path":"qc.html","id":"count-of-missing-hits-per-sample","chapter":"6 Quality control","heading":"6.3 Count of missing hits per sample","text":"following barplot shows range missing hits per samples.\nFigure 6.1: Count missing hits per samples\nCQC CMP two strains containing missing values.Particularly, first biological replicate strains twice missing\nprotein intensities (509 hits 10-16% NAs) rest samples\naverage 231 hits missing (4% 9% NAs).look hits quantified function number strains \nleast one peptide quantified. (non-ubiquitous hits)\nFigure 6.2: Distribution expression hits detected strains\nProteins expressed across less strains lower median peptide intensity.\nNevertheless, almost two thirds (66.5%) protein hits detected strains.\n86% protein hits expressed majority strains (least 5 8 strains).","code":"#> Joining, by = \"sample\""},{"path":"qc.html","id":"missing-hits-across-samples","chapter":"6 Quality control","heading":"6.4 Missing hits across samples","text":"Furthermore, can check whether proportion missing values equally\ndistributed among samples.\nFigure 6.3: Number quantified intensities across samples\n","code":""},{"path":"qc.html","id":"coefficient-of-variations","chapter":"6 Quality control","heading":"6.5 Coefficient of variations","text":"Coefficient variations correspond percent variance relative mean.\nfollowing boxplots show variable protein expression , across strains\nacross biological replicates, normalization.\nFigure 6.4: Coefficient variations (%) sample per strains processing data (filtering normalization)\n\nTable 6.1: Coefficient variation - intensities per strain\n\nTable 6.1: Coefficient variation - intensities per biological replicate\n\nTable 6.1: Coefficient variation - intensities per strain\n\nTable 6.1: Coefficient variation - intensities per biological replicate\n","code":""},{"path":"qc.html","id":"expression-distributions","chapter":"6 Quality control","heading":"6.6 Expression distributions","text":"highlight strength normalization, also show density distribution \nexpression normalization using following normalization methods:","code":"\ndraw_normalization_density(int_raw,int_lfq,df.group)\n#> Input data checked. All fields are valid.\n#> Sample check: More than one sample group found\n#> Sample replication check: All samples have replicates\n#> No RT column found, skipping RT processing\n#> No RT column specified (column named 'RT') or option not specified Skipping RT normalization.\n#> Joining, by = \"sample\"\n#> Joining, by = \"sample\""},{"path":"qc.html","id":"compare-all-vs-all-expression","chapter":"6 Quality control","heading":"6.7 Compare all-vs-all expression","text":"","code":""},{"path":"qc.html","id":"scatterplots","chapter":"6 Quality control","heading":"6.7.1 Scatterplots","text":"","code":"\n# scatterplots between all samples\nscmat_all=draw_scatterplots(datain=int_all)\nprint(scmat_all)"},{"path":"qc.html","id":"heatmap-correlation","chapter":"6 Quality control","heading":"6.7.2 Heatmap correlation","text":"heatmap correlations samples show high correlation expression\nreplicates strains:\n[0.824 - 0.992]expression 1st biological replicates strains CQC CMP seem\nslighlty less correlated samples.","code":"\n# heatmap correlation\ncs_all=compute_samples_correlation(int_all)\n#> Compute pairwise samples correlation (Spearman)...\n#> \n#> Correlation method: 'spearman'\n#> Missing treated using: 'pairwise.complete'\nCOR_RANGE = range( cs_all[row(cs_all) == (col(cs_all) - 1)] )\n\nby_sample = df.group %>% column_to_rownames(\"sample\")\nhm_all=draw_heatmap_samples(mcor = cs_all,df.group=by_sample,col.group = col.group)"},{"path":"qc.html","id":"principle-component-analysis","chapter":"6 Quality control","heading":"6.7.3 Principle Component Analysis","text":"Finally, PCA reveals distance sample.","code":"\nint_all_scaled = scale(int_all,center=T, scale = T)\nmake_pca(na.omit(int_all_scaled), with_labels=T,col_by_group=1:4)"},{"path":"strains-expression-comparison.html","id":"strains-expression-comparison","chapter":"7 Strains expression comparison","heading":"7 Strains expression comparison","text":"","code":""},{"path":"strains-expression-comparison.html","id":"scatterplots-1","chapter":"7 Strains expression comparison","heading":"7.1 Scatterplots","text":"Initially, can look scatterplots intensities -versus-samples.","code":"\n# scatterplots between strains\nscmat_strains=draw_scatterplots(datain=int_filt_strains)\nprint(scmat_strains)"},{"path":"strains-expression-comparison.html","id":"heatmap-correlation-1","chapter":"7 Strains expression comparison","heading":"7.2 Heatmap Correlation","text":"compute spearman rank correlations intensities samples.heatmap correlations show high correlation expression strains:\n[0.942 - 0.977]","code":"\n# heatmap correlation\ncs_strains=compute_samples_correlation(int_filt_strains)\n#> Compute pairwise samples correlation (Spearman)...\n#> \n#> Correlation method: 'spearman'\n#> Missing treated using: 'pairwise.complete'\nCOR_RANGE = range( cs_strains[row(cs_strains) == (col(cs_strains) - 1)] )\n\nhm_strains=draw_heatmap_samples(mcor = cs_strains,df.group=c(),col.group = col.group)"},{"path":"strains-expression-comparison.html","id":"principle-component-analysis-1","chapter":"7 Strains expression comparison","heading":"7.3 Principle Component Analysis","text":"Finally, PCA reveals distance sample.","code":"\nint_scaled_strains = scale(int_filt_strains,center=T, scale = T)\nmake_pca(na.omit(int_scaled_strains), with_labels=F,col_by_group=1:2)"},{"path":"differential-expression.html","id":"differential-expression","chapter":"8 Differential Expression","heading":"8 Differential Expression","text":"","code":""},{"path":"differential-expression.html","id":"volcano-plots","chapter":"8 Differential Expression","heading":"8.1 Volcano plots","text":"","code":"\n\nvolcPlot(INPUT=int_norm, MIN_LFC=2, MIN_PVAL=0.01, WHICH='both', TOPN = 20)\n#> Joining, by = c(\"ID\", \"pValue\", \"qValue\", \"EffectSize\",\n#> \"comparison\", \"sig\", \"log10_qvalue\", \"SGD\", \"ORF\",\n#> \"UNIPROT\", \"GENENAME\")"},{"path":"differential-expression.html","id":"differentially-expressed-genes","chapter":"8 Differential Expression","heading":"8.2 Differentially expressed genes","text":"","code":"\nvolcano_data =  get_volcano_data(input_data=int_norm, which='both',\n                            min_lfc=2, min_pval=0.01, topn = 20)\ndf_limma = bind_rows(volcano_data) %>% as_tibble()\ndfe = subset(df_limma,sig!='Non significant')\ndown = dfe %>% group_by(ID) %>% dplyr::filter(sig=='Downregulated') %>%\n       summarize( strains_down = paste0(comparison,collapse=' '),\n                  down_AMH = str_count(strains_down,'AMH-'),\n                  down_BAN = str_count(strains_down,'BAN-'),\n                  down_BED = str_count(strains_down,'BED-'),\n                  down_BPL = str_count(strains_down,'BPL-'),\n                  down_BTT = str_count(strains_down,'BTT-'),\n                  down_CMP = str_count(strains_down,'CMP-'),\n                  down_CPI = str_count(strains_down,'CPI-'),\n                  down_CQC = str_count(strains_down,'CQC-'))\nup = dfe %>% group_by(ID) %>% dplyr::filter(sig=='Upregulated') %>%  \n      summarize( strains_up = paste0(comparison,collapse=' '),\n                  up_AMH = str_count(strains_up,'AMH-'),\n                  up_BAN = str_count(strains_up,'BAN-'),\n                  up_BED = str_count(strains_up,'BED-'),\n                  up_BPL = str_count(strains_up,'BPL-'),\n                  up_BTT = str_count(strains_up,'BTT-'),\n                  up_CMP = str_count(strains_up,'CMP-'),\n                  up_CPI = str_count(strains_up,'CPI-'),\n                  up_CQC = str_count(strains_up,'CQC-'))\n# get_dfe(int_norm, MIN_LFC=2, MIN_PVAL=0.01,  WHICH='both', TOPN = 20) %>% remove_rownames() %>% \n#   dplyr::left_join(sc_identifiers, by=c('ID'='UNIPROT'))\n\n# Number of times a hit is differentially expressed\ndf_dfe = dfe %>% left_join(janitor::tabyl(dfe,ID,sig)) %>%\n         left_join(down) %>% left_join(up) %>%\n         rename(uniprot=ID) %>% \n         group_by(uniprot,comparison) %>% \n        mutate( n_strains_up = sum(c_across(starts_with('up_')) !=0 ),\n                n_strains_down = sum(c_across(starts_with('down_'))!=0)) %>%\n        replace_na(list(n_strains_up=0,n_strains_down=0)) %>%\n        left_join(evo_yeast, by=c('uniprot'='UNIPROT')) \n#> Joining, by = \"ID\"\n#> Joining, by = \"ID\"\n#> Joining, by = \"ID\"\n  \n\ndf_dfe_annot = df_dfe %>%\n          left_join(sc_annotation_orf,by=c('uniprot'='UNIPROT')) %>%\n  mutate(uniprot_link = paste0(\"<a href='https://www.uniprot.org/uniprot/\",uniprot,\"'>\",uniprot,\"<\/a>\"),\n         sgd_link = paste0(\"<a href='https://www.yeastgenome.org/locus/\",SGD,\"'>\",SGD,\"<\/a>\"),\n         regulated = Downregulated+Upregulated) %>% \n  dplyr::relocate(uniprot,uniprot_link,sgd_link,regulated,Downregulated,Upregulated, \n                  GENENAME,ORF,PNAME,'FUNCTION','BIOPROCESS_all','ORTHO','OTHER')\nlibrary(kableExtra)\nlibrary(formattable)\nlibrary(DT)\n\nft_dt = df_dfe_annot %>% \n  formattable(\n    list(\n      `Downregulated` = color_tile(\"white\", \"red\"),\n      `Upregulated` = color_tile(\"white\", \"blue\"),\n      `regulated` = color_tile(\"white\", \"gray\")\n    )\n) %>% as.datatable(\n        options = list(\n            fixedHeader=T,\n            paging = TRUE, pageLength = 20,  ## paginate the output and #rows for each page\n            scrollY = TRUE,   ## enable scrolling on X/Y axis\n            #autoWidth = TRUE, ## use smart column width handling\n            server = FALSE,   ## use client-side processing\n            dom = 'Bfrtip', buttons = list('csv', 'excel', list(extend = 'colvis')),\n            fixedColumns = list(leftColumns = 2),\n            columnDefs = list(list(visible=FALSE, targets=c(42:48)))\n          ),\n  extensions = c('FixedHeader','FixedColumns','Buttons'),\n  selection = 'single',           ## enable selection of a single row\n  filter = 'bottom',              ## include column filters at the bottom\n  rownames = FALSE,               ## don't show row numbers/names\n  width = NULL, \n  height = NULL,\n  caption = NULL\n) %>% \n   formatStyle(columns = 1:30, target= 'row',lineHeight='100%', `font-size` = '12px')\n\nft_dt"},{"path":"differential-expression.html","id":"functional-map-for-diffentially-expressed-genes","chapter":"8 Differential Expression","heading":"8.3 Functional map for diffentially expressed genes","text":"","code":"\nlibrary(treemap)\nlibrary(d3Tree)\ntreemap(df_dfe_annot, index=c(\"BIOPROCESS_all\", \"comparison\"), vSize='regulated', vColor=\"EffectSize\", type=\"value\") \ntreemap(df_dfe_annot, index=c(\"BIOPROCESS_all\", \"GENENAME\"), vSize=\"regulated\", vColor=\"EffectSize\", type=\"value\",)"},{"path":"differential-expression.html","id":"heatmap-of-expression-differences","chapter":"8 Differential Expression","heading":"8.4 Heatmap of expression differences","text":"","code":"\ndat_scaled = int_scaled_strains %>% as.data.frame() %>% rownames_to_column('uniprot')\n\n# Transpose the matrix to calculate distance between experiments, row-wise\nd_pair <- dat_scaled[,-1] %>% t() %>%\n  dist(.,method = \"euclidean\", diag = FALSE, upper = FALSE)\n# Calculate the distance between proteins row-wise \nd_prot <- dat_scaled %>% dplyr::filter( uniprot %in% dfe$ID) %>% dplyr::select(-uniprot) %>% dist(.,method = \"euclidean\", diag = FALSE, upper = FALSE)\n\ndfe_lfc = bind_rows(volcano_data) %>% \n          pivot_wider(id_cols=ID, names_from = 'comparison', values_from = 'EffectSize') %>% \n          dplyr::filter(ID %in% dfe$ID) %>% left_join(sc_identifiers,by=c('ID'='UNIPROT')) %>%\n          column_to_rownames('GENENAME') %>% dplyr::select(-ORF,-ID,-SGD)\npheatmap::pheatmap(t(dfe_lfc),fontsize = 5,cutree_rows = 5,cellwidth = 3,cellheight = 3,border_color = NA)\n\ndfe_exp = dat_scaled %>% dplyr::filter( uniprot %in% dfe$ID) %>%  left_join(sc_identifiers,by=c('uniprot'='UNIPROT'))  \n\n#p_dfe_exp=pheatmap::pheatmap(dfe_exp %>% dplyr::select(-ORF,-uniprot,-SGD) %>%column_to_rownames('GENENAME'),\n#                             fontsize = 8,cellwidth = 4,cellheight =4,border_color = NA,treeheight_col = 10)\n\ntextcol <- \"grey40\"\n# further modified ggplot\np <- ggplot(dfe_exp%>%pivot_longer(where(is.numeric), names_to = 'strain', values_to='exp'), \n            aes(y=strain, x=GENENAME, fill=exp))+\n  geom_tile(colour=\"white\", size=0.1)+\n  labs(x=\"\", y=\"\")+\n  scale_fill_gradientn(colours = colorRampPalette(rev(brewer.pal(n = 7, name =\n  \"RdYlBu\")))(100))+\n  #scale_fill_manual(values=c(\"#d53e4f\", \"#f46d43\", \"#fdae61\", \"#fee08b\", \"#e6f598\", \"#abdda4\", \"#ddf1da\"), na.value = \"grey90\")+\n  theme_grey(base_size=10)+\n  theme(legend.position=\"right\", legend.direction=\"vertical\",\n        legend.title=element_text(colour=textcol),\n        legend.margin=margin(grid::unit(0, \"cm\")),\n        legend.text=element_text(colour=textcol, size=7, face=\"bold\"),\n        legend.key.height=grid::unit(0.8, \"cm\"),\n        legend.key.width=grid::unit(0.2, \"cm\"),\n        axis.text.x=element_text(size=8, angle=90,colour=textcol,hjust = 1),\n        axis.text.y=element_text(vjust=0.2, colour=textcol),\n        axis.ticks=element_line(size=0.4),\n        plot.background=element_blank(),\n        panel.border=element_blank(),\n        plot.margin=margin(0.7, 0.4, 0.1, 0.2, \"cm\"),\n        plot.title=element_text(colour=textcol, hjust=0, size=14, face=\"bold\")\n        ) + coord_equal()\np"},{"path":"session-info.html","id":"session-info","chapter":"9 Session Info","heading":"9 Session Info","text":"","code":""},{"path":"session-info.html","id":"appendix-all-code-for-this-report","chapter":"9 Session Info","heading":"9.1 Appendix: All code for this report","text":"","code":"\n# example R options set globally\noptions(width = 60)\n\n# example chunk options set globally\nknitr::opts_chunk$set(\n  comment = \"#>\",\n  collapse = TRUE,\n  out.width=\"100%\"\n)\nknitr::include_graphics(\"images/Fungi-SpeciesTree-v7.png\")\nchap_cur = 00\n# Make sure the install repositories for dependencies are CRAN + Bioconductor\n#options(repos = c(getOption(\"repos\"), BiocManager::repositories()))\nknitr::opts_chunk$set(echo = T, collapse = T, cache.lazy = F,autodep = T, warning = F)\n# HAVE TO INSTALL IN LINUX: Curl and Cairo library\nsuppressPackageStartupMessages({\n  library(here)\n  source(\"https://raw.githubusercontent.com/benjamin-elusers/yeastomics/main/src/__setup_yeastomics__.r\")\n  library(xfun)\n  dep.pkg = c(\"corrplot\", \"ggtree\", \"gtools\", \"pbapply\", \"gridExtra\", \"GGally\",\n    \"dplyr\", \"performance\", \"ggplot2\",  \"ggfortify\", \"tidyverse\", \"gplots\",\n    \"data.table\", \"ggpubr\", \"ggcorrplot\", \"plotly\", \"ggsignif\", \"ape\",\"kableExtra\",\n    \"ggcorrplot\",\"formattable\",\"DT\",\"sessioninfo\")\n  xfun::pkg_attach2(dep.pkg)\n  source(here(\"src\",\"functions_transcriptomics.R\"))\n  source(here(\"src\",'function_proteomics.r'))\n})\n# turn off annoying messages from dplyr::summarise\noptions(dplyr.summarise.inform = FALSE)\ngraphics.off()\n\n# Yeast data\nsc_annofile = here('data','yeast-annotations.rds')\nsc_annotation = preload(sc_annofile, load.annotation(),doing='loading annotations data for yeast...')\nsc_annotation_orf = dplyr::select(sc_annotation,-c(SGD,GENENAME,ROLE,LOC,COMPLEX,node,nprot,nsp,taxon))\nsc_identifiers = sc_annotation %>% dplyr::select(SGD,ORF,UNIPROT,GENENAME)\n\nriboseq_strains = c('AMH','BAN','BED','BPL','BTT','CMP','CPI','CQC') # Strains with riboseq data (on 14/01/21)\nstrains.info = load.peter2018.data(1) %>%  # strains info from supp mat of Science paper\n                 mutate( has_riboseq = standardized_name %in% riboseq_strains)\n\nyk11_all_snp = left_join(readRDS(here('data','YK11-SNP_NT.rds')),\n                         readRDS(here('data','YK11-SNP_AA.rds')), \n                         by=c('id', \"aa_pos\"='ref_pos', 'alt_codon_aa' = 'alt_aa'), \n                         suffix = c(\"_nt\", \"_aa\") ) %>%\n    left_join(sc_identifiers,by=c('id'='ORF'))\n\n\ny8_all_snp = left_join(readRDS(here('data','Y8-SNP_NT.rds')),\n                       readRDS(here('data','Y8-SNP_AA.rds')), \n                       by=c('id', \"aa_pos\"='ref_pos', 'alt_codon_aa' = 'alt_aa'),\n                       suffix = c(\"_nt\", \"_aa\")) %>% \n  left_join(sc_identifiers,by=c('id'='ORF'))\n\n# Conservation/evolutionary rate\nevo_fungi = read_delim(here('output','evolution-fungi-protein.tsv'),delim='\\t') \nevo_snp = read_delim(here('output','evolution-snp-protein.tsv'),delim='\\t') \nfungi_rate = evo_fungi %>% dplyr::select(r4s:leisr_local) %>% as.matrix\nstrains_rate = evo_snp %>% dplyr::select(r4s:leisr_local) %>% as.matrix\ner_fungi_cor = cor(fungi_rate,use='pairwise.complete',met='spearman')\ner_strains_cor = cor(strains_rate,use='pairwise.complete',met='spearman')\n\nggcorrplot(er_fungi_cor,type='upper',method='circle',lab = T,lab_size = 3, title='fungi evo. rate')\nggcorrplot(er_strains_cor,type='upper',method='circle',lab = T,lab_size = 3, title='strains evo. rate')\n\ner_fungi_worst   = colnames(er_fungi_cor)[ abs(er_fungi_cor[1,]) < 0.7 ]\ner_strains_worst = colnames(er_strains_cor)[ abs(er_strains_cor[1,]) < 0.7 ]\n\n# Keep the best evolutionary rates (correlates with r4s > 0.7)\nevo_yeast = left_join(evo_snp,evo_fungi, by=c('id','len_ref'),suffix=c('.yk11','.fungi')) %>% \n            mutate(HAS_ORTHOLOG = !is.na(len_msa.fungi) ) %>% \n    left_join(sc_identifiers,by=c('id'='ORF')) %>% \n    dplyr::mutate( f_snp = n_mismatched/len_msa.yk11, pid.fungi=1-f_mismatched) %>%\n    dplyr::rename(orf=id,n_snp = n_mismatched) %>%\n    dplyr::select(-f_mismatched) %>%\n    relocate(orf,UNIPROT,GENENAME,SGD,HAS_ORTHOLOG, len_ref,\n             len_msa.yk11, n_snp,f_snp, len_msa.fungi,pid.fungi) %>% \n    dplyr::select(-paste0(er_fungi_worst,'.fungi'),-paste0(er_strains_worst,'.yk11'))\n\n# test = evo_yeast%>% dplyr::select(n_snp:leisr_local.fungi) %>% as.matrix()\n# test_cor = cor(test, use='pairwise.complete',method='spearman')\n# ggcorrplot(test_cor,type='upper',method='circle',lab = T,lab_size = 3, title='')\nsave.image(here::here('output',sprintf(\"%02d-yeast-data.rdata\",chap_cur)))\n# example R options set globally\noptions(width = 60)\n\n# example chunk options set globally\nknitr::opts_chunk$set(\n  comment = \"#>\",\n  collapse = TRUE,\n  out.width=\"100%\"\n)\nchap_cur=01\nchap_num = sprintf(\"%02d-\",chap_cur)\nload(here::here('output',sprintf(\"%02d-yeast-data.rdata\",chap_cur-1)))\n## Our dataset\nisolates = c('CPI','CMP','AMH','CQC','BPL','BTT','BED','BAN')\nRNA_seq_data = readRDS(here(\"data\",'RNA_seq.RDS'))\nRibo_seq_data = readRDS(here(\"data\",'Ribo_seq.RDS'))\nn = nrow(RNA_seq_data)\nstrains = fread(here(\"data\",'strains.csv'),data.table = F)\nstrains = strains[strains$`Standardized name`%in%isolates,c(1,2,3,4,9,10,11,16)]\nlibrary(DT)\ndatatable(strains, rownames = FALSE, caption = NULL,\n               filter = \"top\", escape = FALSE, style = \"default\",\n               width = NULL, height = NULL)\n\np1= ggcorr(RNA_seq_data ,method = c(\"everything\", \"spearman\"), label = T, label_round = 2, midpoint = 0.75, limits = c(0.6,1), size = 2)+\n  ggtitle('RNA-seq correlation matrix')\np2=ggcorr(Ribo_seq_data ,method = c(\"everything\", \"spearman\"), label = T, label_round = 2, midpoint = 0.75, limits = c(0.6,1), size = 2)+\n  ggtitle('Ribo-seq correlation matrix')\n\ngrid.arrange(p1,p2, ncol=2)\n\nproteomic_WIS2 = fread(here::here('output','median-normalized.txt'), data.table = F)\nn = nrow(proteomic_WIS2)\na = fread(here::here('output','proteomics-normalized-log10_intensities.tsv'))\nrownames(proteomic_WIS2)= a$UNIPROT\n\nprot_gene_name = fread(here::here('output','test.csv'), fill = T, data.table = F) %>% \n                  mutate(Chromosome = recode(Chromosome,'(3)'=V8) ) %>% \n                  dplyr::select(-V8) %>%\n                  dplyr::filter(!duplicated(prot_names))\n                  \n\n# Calculate mean of normalized intensity per strain\nint_strains = pivot_longer(proteomic_WIS2 %>% rownames_to_column('uniprot'), \n             -uniprot, values_to='int2use',\n                       names_to = c('strain','bio','tech','day'),\n                       names_pattern = \"([^_]+)_([^_]+)_([^_]+)_([^_]+)\") %>% \n      group_by(uniprot,strain=toupper(strain)) %>% summarize( mean_int = mean_(int2use)) %>%\n      pivot_wider(id_cols=uniprot, names_from = strain, names_glue = \"{strain}\", values_from = mean_int )\n\nproteomic_WIS_mean_filtered = data.frame(int_strains) %>% \n                      drop_na %>% \n                      dplyr::filter(uniprot %in% prot_gene_name$prot_names) %>% \n                      left_join(prot_gene_name[,c('prot_names','ID')], by=c('uniprot'='prot_names'))\n\nall_exp = proteomic_WIS_mean_filtered %>% \n  inner_join(RNA_seq_data %>% rownames_to_column('ID'), by ='ID', suffix=c('_Prot','')) %>% \n  inner_join(Ribo_seq_data %>% rownames_to_column('ID'), by ='ID', suffix=c('_RNA','_Ribo'))\n\n\nlog2_all_exp= all_exp %>% column_to_rownames('ID') %>%\n              # transform to log2 to RNA and Ribo (already done for normalized proteomics)\n              mutate( across( ends_with(c('_RNA','_Ribo')), .fns = log2) ) %>%\n              select(where(is.numeric))\nboxplot(log2_all_exp,las=2,ylab='Gene expression (log2)')\ndf_rank <- apply(log2_all_exp,2,rank,ties.method=\"min\") \ndf_sorted <- data.frame(apply(log2_all_exp, 2, sort))\ndf_mean <- apply(df_sorted, 1, mean)\nindex_to_mean <- function(my_index, my_mean){\n  return(my_mean[my_index])\n}\n\nlog2_all_exp_norm <- apply(df_rank, 2, index_to_mean, my_mean=df_mean) %>% as_tibble\nrownames(log2_all_exp_norm) = rownames(log2_all_exp)\nboxplot(log2_all_exp_norm,las=2, ylab='Normalized gene expression (log2)', title='Quantile-normalized gene expression across RNA/Ribo/Proteomics')\nlibrary(corrr)\ncor_prot= select(log2_all_exp_norm, ends_with('_Prot')) %>%  correlate(method = 'sp') %>% column_to_rownames('term')\ncor_rna= select(log2_all_exp_norm, ends_with('_RNA')) %>%  correlate(method = 'sp') %>% column_to_rownames('term')\ncor_ribo= select(log2_all_exp_norm, ends_with('_Ribo')) %>%  correlate(method = 'sp') %>% column_to_rownames('term')\n\ncor_exp= tibble(RNA = cor_rna[lower.tri(cor_rna)],\n                Ribo = cor_ribo[lower.tri(cor_ribo)],\n                Prot = cor_prot[lower.tri(cor_prot)])\ndf_cor_exp = pivot_longer(cor_exp, everything()) %>% \n              arrange(name) %>% mutate(experiment = factor(name))\npair_exp = unique(df_cor_exp$experiment) %>% as.character() %>% combn(m = 2) %>% as_tibble()\n\nggplot(df_cor_exp,aes(x=experiment, y=value,fill=experiment))+\n  geom_boxplot()+\n  theme_classic()+\n  xlab('')+\n  ylab('Rho')+\n  stat_compare_means(comparisons =pair_exp)\n#remotes::install_github(\"TimTeaFan/dplyover\")\nlibrary(dplyover)\n# calculate fold change pairwise for each experiment\nfc_prot = select(log2_all_exp_norm,ends_with('_Prot')) %>% \n  rename_with(.fn=str_remove_all,pattern = \"_Prot\") %>%\n  transmute(across2x(everything(), everything(),.fns = ~foldchange(.x,.y),.comb = 'minimal'),\n            experiment='Prot')%>% \n  pivot_longer(-experiment,names_to='pair',values_to = 'fc')\nfc_rna = select(log2_all_exp_norm,ends_with('_RNA')) %>% \n  rename_with(.fn=str_remove_all,pattern = \"_RNA\") %>%\n  transmute(across2x(everything(), everything(),.fns = ~foldchange(.x,.y),.comb = 'minimal'),\n            experiment='RNA')%>% \n  pivot_longer(-experiment,names_to='pair',values_to = 'fc')\nfc_ribo = select(log2_all_exp_norm,ends_with('_Ribo')) %>% \n  rename_with(.fn=str_remove_all,pattern = \"_Ribo\") %>%\n  transmute(across2x(everything(), everything(),.fns = ~foldchange(.x,.y),.comb = 'minimal'),\n            experiment='Ribo') %>% \n  pivot_longer(-experiment,names_to='pair',values_to = 'fc')\n\n# combine all pairwise foldchange\nfc_exp = bind_rows(fc_prot,fc_rna,fc_ribo) %>% arrange(experiment,pair)\n\npair_exp=unique(fc_exp$experiment) %>% as.character() %>% combn(m = 2) %>% as_tibble()\n\nggplot(fc_exp,aes(experiment, log2(fc), fill=experiment))+\n  geom_boxplot()+\n  scale_y_log10()+\n  stat_compare_means(comparisons = pair_exp)+\n  theme_classic()+\n  xlab('')+\n  ylab('|log2(FC)|')\n\n# dist_exp = log2_all_exp_norm %>% add_column(id=all_exp$ID) %>%\n#   pivot_longer(cols = -id,\n#                names_to = c('strain','experiment'), \n#                names_pattern = '(.+)_(.+)', \n#                values_to = 'exp') %>% \n#   pivot_wider(id_cols = c('id','experiment'),names_from='strain', values_from = 'exp') %>%\n#   group_by(experiment) %>% \n#   mutate( across2x(AMH:CQC, AMH:CQC, .fns =dist, method= 'euclidean', .comb = 'minimal'))     \n#            \n\nb=lapply(c('RNA','Ribo','Prot'), function(i){\n  i<<-i\n  a = log2_all_exp_norm[,grep(i, colnames(log2_all_exp_norm))]\n  a = dist(t(a))\n  a = as.matrix(a)\n  a= a[lower.tri(a)]\n  return(a)\n})\nnames(b)=  c('RNA','Ribo','Prot')\nb=as.data.frame(b)\nb = melt(b)\n\npair_exp=unique(b$variable) %>% as.character() %>% combn(m = 2) %>% as_tibble()\n\nggplot(b,aes(x=variable,y=value, fill=variable))+\n  geom_boxplot()+\n  theme_classic()+\n  ylab('Euclidean distance')+\n  xlab('')+\n  stat_compare_means(comparisons = pair_exp)\n\n\na=lapply(c('RNA','Ribo','Prot'), function(i){\n  i<<-i\n  a = log2_all_exp_norm[,grep(i, colnames(log2_all_exp_norm))]\n  a=apply(a,1 ,var)\n  return(a)\n})\nnames(a)= c('RNA','Ribo','Prot') \na =as.data.frame(a)\nb=a\nb = melt(b)\n\npair_exp=unique(b$variable) %>% as.character() %>% combn(m = 2) %>% as_tibble()\n\nggplot(b,aes(x=variable,y=value, fill=variable))+\n  geom_boxplot()+\n  theme_classic()+\n  ylab('Variance')+\n  xlab('')+\n  stat_compare_means(comparisons = pair_exp)+\n  scale_y_log10()\n\nsave.image(here::here('output',paste0(chap_num,\"transcriptomics.rdata\")))\n# example R options set globally\noptions(width = 60)\n\n# example chunk options set globally\nknitr::opts_chunk$set(\n  comment = \"#>\",\n  collapse = TRUE,\n  out.width=\"100%\"\n)\nchap_cur=02\nchap_num = sprintf(\"%02d-\",chap_cur)\nload(here::here('output',sprintf(\"%02d-yeast-data.rdata\",chap_cur-2)))\nknitr::include_graphics(\"images/phylogenetic-tree-8-strains.png\")\n# Maxquant files\nMAXQUANT.files = list(\n  evidence = here::here('data','Raw_files','combined/txt','evidence.txt'),\n  annotation = here::here('results','keys.txt'),\n  proteinGroups = here::here('data','Raw_files','combined/txt','proteinGroups.txt')\n)\n# Reading maxquant protein data\nms0=read_maxquant(MAXQUANT.files$proteinGroups, zero.to.na = T, int_type = 'LFQ', pep_type = 'Unique peptides')\n\nkeys_cols = c('majority_protein_i_ds','gene_names')\n\n# get sample_names\nsamples = str_subset(colnames(ms0),'lfq_intensity') %>% str_replace('lfq_intensity_',\"\")\nnsamples=n_distinct(samples)\n\n# define groups based on sample names\ndf.group = tibble(sample=toupper(samples)) %>%\n            separate(col=sample, into= c('strain','biorep','techrep','dayrun'), sep = '_', remove = F) %>%\n            mutate( biorep = paste0(\"R\",biorep), techrep = paste0(\"r\",techrep),dayrun=paste0(dayrun,\"_04_22\"))\n\nall_strains = unique(df.group$strain)\nnstrains = n_distinct(all_strains)\nnreplicates = df.group %>% count(strain) %>% pull(n) %>% unique\n\n# associate a palette of colors for each group\ncol.group = list(\n  # spectral palette\n  # strain = c('AMH'=\"#D53E4F\", 'BAN'=\"#F46D43\", 'BED'=\"#FDAE61\", 'BPL'=\"#FEE08B\",\n              # 'BTT'=\"#E6F598\", 'CMP'=\"#ABDDA4\", 'CPI'=\"#66C2A5\", 'CQC'=\"#3288BD\"),\n  # Set1 palette\n  strain = c('AMH'=\"#E41A1C\", 'BAN'=\"#377EB8\", 'BED'=\"#4DAF4A\", 'BPL'=\"#984EA3\",\n             'BTT'=\"#FF7F00\", 'CMP'=\"#FFFF33\", 'CPI'=\"#A65628\", 'CQC'=\"#F781BF\"),\n  biorep = c('R1'=\"#002BDC\",'R2'=\"#00A6E7\"),\n  techrep = c('r1'=\"#1C7947\",'r2'=\"#39A388\"),\n  dayrun = c('10_04_22'='white','12_04_22'='black') \n  )\n\n\nTAB_SAMPLES= kbl(samples,col.names = 'Sample Names:',row.names =T, centering = F) %>% \n              kable_paper(\"striped\", full_width = F) %>% \n              kable_styling(position='left')  \n\n#write_rds(ms0,here('output','01-expression.rds'))\n#write_rds(df.group,here('output','01-samples-group.rds'))\n#write_rds(col.group,here('output','01-samples-colors.rds'))\n# Total number of hits\nNHITS = n_distinct(ms0$protein_i_ds)\n# Contaminants\nis_contaminant = str_detect(ms0$protein_i_ds,\"CON__\")\nNCON = n_distinct(ms0$protein_i_ds[is_contaminant])\n# Reversed sequences (REV reversed sequences used by MaxQuant to estimate the FDR)\nis_reversed = str_detect(ms0$protein_i_ds,\"REV__\")\nNREV = n_distinct(ms0$protein_i_ds[is_reversed])\n# Proteins\nis_protein_group = !is_contaminant & !is_reversed\nNPROT = n_distinct(ms0$protein_i_ds[is_protein_group])\n\n# Multiple proteins matched\nNSINGLE = sum(ms0$number_of_proteins==1 & is_protein_group)\nNMULTI = sum(ms0$number_of_proteins > 1 & is_protein_group)\nNDUP = sum(ms0$number_of_proteins==2 & is_protein_group)\nsave.image(here('output',paste0(chap_num,\"proteomics.rdata\")))\n# example R options set globally\noptions(width = 60)\n\n# example chunk options set globally\nknitr::opts_chunk$set(\n  comment = \"#>\",\n  collapse = TRUE,\n  out.width=\"100%\"\n)\nchap_cur=03\n#load(here('output',sprintf('%02d-proteomics.rdata',chap_cur-1)))\n# Filter hits\nms1=filter_hits(ms0)\n\nint_raw=read_maxquant(MAXQUANT.files$proteinGroups, zero.to.na = T, int_type = 'Intensity', pep_type = 'Unique peptides') %>% \n  filter_hits(verbose = F) %>% \n  dplyr::select(uniprot=majority_protein_i_ds,starts_with(\"intensity_\")) %>% \n            #mutate(across(where(is.integer64), ~as.integer(.))) %>% # make sure to use numeric and not integer\n            as.data.frame() %>% column_to_rownames('uniprot') %>%\n            rename_with(everything(),.fn=gsub, pattern='intensity_', replacement='') %>%\n            rename_with(.fn = str_to_upper)\n\n# Process intensities\nis.integer64 <- function(x) inherits(x, \"integer64\")\n\nint_lfq = ms1 %>% dplyr::select(uniprot=majority_protein_i_ds,starts_with(\"lfq\")) %>% \n            #mutate(across(where(is.integer64), ~as.integer(.))) %>% # make sure to use numeric and not integer\n            as.data.frame() %>% column_to_rownames('uniprot') %>%\n            rename_with(everything(),.fn=gsub, pattern='lfq_intensity_', replacement='') %>%\n            rename_with(.fn = str_to_upper)\n            \n\nint_md_norm = center_intensities(int_lfq, center='median', tolog2=T) %>% \n          as.data.frame() %>%\n          rename_with(everything(),.fn =gsub, pattern='lfq_intensity_', replacement='') %>% \n          rename_with(.fn = str_to_upper)\n         \n# TRYING DIFFERENT NORMALIZATIONS SCHEME (NOT READY)\nINT_NORM = normalize_intensities(int = int_raw, design = df.group)\nTAB_NORM = kbl(names(INT_NORM@normalizations),row.names = T,col.names = 'Normalizations:',position = 'left') %>% \n            kable_paper(\"striped\", full_width = F) %>% \n            kable_styling(position='left')  \n\n            \nint_norm = int_md_norm %>% rownames_to_column('uniprot') \nint_norm_ids = int_norm %>% dplyr::left_join(sc_identifiers,by=c('uniprot'='UNIPROT')) \n#compare_exp(log2(int_raw),int_loess_norm, all=T)\n\nlong_int_norm = pivot_longer(int_norm  , cols=-uniprot, values_to='int2use',\n                             names_to = c('strain','bio','tech','day'),\n                             names_pattern = \"([^_]+)_([^_]+)_([^_]+)_([^_]+)\") %>%\n                group_by(strain,uniprot) %>% mutate(na_rep = sum.na(int2use))\n\n# Intensities across strains  (default is average)\nint_by_strain = pivot_wider(long_int_norm ,\n              id_cols=uniprot,\n              names_from = 'strain',\n              names_glue = \"{strain}\",\n              values_from = \"int2use\",\n              values_fn=mean_\n              )\n\nna_by_strain = pivot_wider(long_int_norm,\n              id_cols=uniprot,\n              names_from = c('strain'),\n              names_glue = \"na_rep_{strain}\",\n              values_from = \"int2use\",\n              values_fn=sum.na\n              )\n\ndf_strains= left_join(int_by_strain,na_by_strain) %>% \n  rowwise %>%\n  mutate( na_strains = sum.na(c_across(cols = starts_with('lfq_int'))) )\n\nint_all = int_norm  %>% column_to_rownames('uniprot') %>% as.data.frame()\n\n# Removing hits with missing values for more than one strain (using average intensities over replicates)\nms2= df_strains %>% filter(na_strains < 1)\nint_filt_strains = ms2 %>% dplyr::select(-starts_with('na')) %>% column_to_rownames('uniprot') %>% as.data.frame()\n\n# Save processed & normalized intensities data\n#write_rds(df_strains,here::here('output',sprintf(\"%02d-normalized-intensities.rds\",chap_cur)))\nsave.image(here('output',sprintf(\"%02d-processed-data.rdata\",chap_cur)))\n# example R options set globally\noptions(width = 60)\n\n# example chunk options set globally\nknitr::opts_chunk$set(\n  comment = \"#>\",\n  collapse = TRUE,\n  out.width=\"100%\"\n)\nchap_cur=04\n#load(here('output',sprintf(\"%02d-processed-data.rdata\",chap_cur-1)))\n# get lfq-peptide intensities (lfq=label-free quantitation) \nintensities = ms1 %>% dplyr::select(uniprot=majority_protein_i_ds,starts_with(\"lfq\")) \n# Convert intensities to long format \nlong_int_all = get_long_intensities(intensities) %>% mutate(int2use = log10_int)\ntot_int = pivot_longer(intensities,   -uniprot,\n                       names_to = c('sample','strain','bio','tech','day'),\n                       names_pattern = \"(([^_]+)_([^_]+)_([^_]+)_([^_]+))\",\n                       names_prefix = 'lfq_intensity_',\n                       values_to='int') %>% \n  group_by(sample) %>% \n  summarize(total_intensity=sum_(as.numeric(int))) %>% \n  dplyr::left_join(df.group %>% mutate(sample=tolower(sample)))\n\n  \nbp_totint= ggplot( tot_int, aes(x=sample,y=total_intensity,fill=strain,label=sample)) + \n  geom_col() + \n  geom_text(angle=90,check_overlap = T,hjust=-0.1,y=0) + \n  theme(axis.text.x = element_blank(),axis.ticks = element_blank())\nplot(bp_totint)\n\n# Get intensities for ubiquitously detected hits between strains\nlong_intensities = long_int_all %>% \n  filter(ratio_na_rep<1) %>% # At least one peptide in one replicate from a each strain\n  group_by(strain) %>% mutate(nprot = n_distinct(uniprot)) %>% \n  hablar::convert(n_na_rep=int(n_na_rep)) %>% \n  arrange(n_na_rep)\n\n# Get median expression and # proteins per strain as a function of NAs in replicates\nstats_per_strain=long_intensities %>% \n  group_by(strain=toupper(strain),n_na_rep=factor(n_na_rep)) %>% \n  summarize(nprot=n_distinct(uniprot),  MAX=max(int2use), MED=median_(int2use)) %>% \n  mutate( YMAX = MAX - 0.25*as.numeric(n_na_rep))\n\n# Compare intensities of ubiquitous hits between strains\nbp=ggplot(data=long_intensities,mapping=aes(y=int2use,x=toupper(strain))) +\n  ggbeeswarm::geom_quasirandom(mapping = aes(group=n_na_rep,color=as.factor(nreplicates-n_na_rep)), na.rm=TRUE) +\n  geom_violin(alpha=0.2, na.rm=TRUE,draw_quantiles = c(0.25,0.5,0.75)) + \n  geom_text(data=stats_per_strain,aes(label=nprot,color=nreplicates-n_na_rep,x=strain,y=YMAX),show.legend = F) +\n  ylim(5,max_(stats_per_strain$MAX)) +\n  ylab('Peptides intensities (log10)') + labs(x='Strains', colour='expressed in # replicates') +\n  theme_pubclean() + grids(axis = 'y') + theme(axis.text = element_text(size=12)) +\n  scale_color_canva(palette = \"Pool party\",limits=rev)\nplot(bp)\n\nBY_STRAINS = group_by(long_intensities,strain=toupper(strain)) %>% \n             summarize(median_exp=median_(int2use)) %>%\n             data.table::transpose(make.name = \"strain\", keep.names = \"strain name\") \n\nBY_REP = group_by(long_intensities, n_replicates=as.integer(4-n_na_rep)) %>% \n  summarize(median_exp=median_(int2use)) %>% \n  data.table::transpose(make.name = 'n_replicates',keep.names = '# replicates')\n\nTAB_STRAINS_EXP = kbl( BY_STRAINS ,digits = 2) %>%\n  kable_paper(\"striped\", full_width = F) %>% kable_styling()\n\nTAB_REP_EXP = kbl( BY_REP, digits=2 ) %>%\n  kable_paper(\"striped\", full_width = F) %>% kable_styling()  \n\ncount_NA_samples= pivot_longer(intensities,   -uniprot,\n                           names_to = c('sample','strain','bio','tech','day'),\n                           names_pattern = \"(([^_]+)_([^_]+)_([^_]+)_([^_]+))\",\n                           names_prefix = 'lfq_intensity_',\n                           values_to='int') %>% \n  group_by(sample) %>% \n  summarize(n_na=sum(is.na(int))) %>% \n  dplyr::left_join(df.group %>% mutate(sample=tolower(sample))) %>% \n  mutate(is_outlier = strain %in% c(\"CQC\",\"CMP\") & biorep==\"R1\")\n\nmean_na_outliers = mean_(count_NA_samples %>% dplyr::filter(is_outlier) %>% pull(n_na)) %>% round()\nmean_na = mean_(count_NA_samples %>% dplyr::filter(!is_outlier) %>% pull(n_na)) %>% round()\n\nbp_na = ggplot(count_NA_samples,aes(x=sample,label=sample)) + \n        geom_col(aes(y=n_na,fill=strain,col=is_outlier)) + \n        geom_text(data=subset(count_NA_samples,!is_outlier),aes(y=0),angle=90,hjust=-0.1)+\n        geom_text(data=subset(count_NA_samples,is_outlier),aes(y=0),angle=90,hjust=-0.1,col='red')+\n        ylab('# NAs') +\n        theme(axis.text.x = element_blank(),axis.ticks = element_blank()) +\n        geom_hline(yintercept = mean_na_outliers,col='red',linetype=2) + \n        geom_hline(yintercept = mean_na) + scale_color_manual(values = c('TRUE'='red'))\n\n  \nplot(bp_na)\npep_missing = long_int_all %>%\n  filter(ratio_na_rep==1) %>% \n  dplyr::select(-c(bio,tech)) %>% \n  distinct()\n\nhit_missing = pep_missing$uniprot\n\nbp_miss= long_int_all %>% arrange(n_na_strains) %>% \n         dplyr::filter(has_missing_strains) %>%\n  ggplot(mapping=aes(y=int2use,x=8-n_na_strains)) +\n  geom_violin(mapping=aes(fill=factor(n_na_strains)),\n              alpha=0.2, na.rm=TRUE,draw_quantiles = c(0.25,0.5,0.75),color='black',show.legend = F) +\n  geom_text(aes(label=nprot_miss),y=12,check_overlap = T,col='red') + ylim(5,12) +\n  ylab('Peptides intensities (log10)') + labs(x='expressed across # strains') +\n  scale_x_continuous(breaks=0:8) +\n  theme_pubclean() + grids(axis = 'y') + theme(axis.text = element_text(size=12))\n  \nplot(bp_miss)\n\nstat_per_miss = long_int_all %>%\n  dplyr::select(n_na_strains,nprot,int2use) %>%\n  mutate(n_strains= nstrains-n_na_strains) %>%\n  group_by(n_strains) %>% mutate(md_exp = median_(int2use)) %>%\n  ungroup() %>% dplyr::select(-int2use) %>%\n  distinct() %>% \n  arrange(n_strains) %>% \n  mutate(\n          f_exp = 100*nprot/sum(nprot),\n          pc_exp = sprintf(\"%.1f%%\",f_exp),\n          pc_cum = sprintf(\"%.1f%%\",cumsum(f_exp))\n          ) %>%\n  arrange(desc(n_strains)) %>%\n  mutate(pc_cum_desc = sprintf(\"%.1f%%\",cumsum(f_exp))) %>%\n  dplyr::select(nprot,n_strains,md_exp,pc_exp,pc_cum,pc_cum_desc)\n\n\nTAB_EXP_STRAIN = kbl(stat_per_miss,digits = 2, align = 'l',\n                     col.names=c('# proteins','# expressing strains','median exp. (log10)','% quantified','cum. %','cum. % (decreasing)')) %>%\n  kable_paper(\"striped\", full_width = F) %>% kable_styling()\n\n# Count hits with NA in samples/groups\nna_int= intensities %>% \n        group_by(uniprot) %>%\n        summarize(across(all_of(paste0(\"lfq_intensity_\",samples)), is.na ) )\ncolnames(na_int) = c('uniprot',samples)\n\nComplexUpset::upset(data=as.data.frame(1-na_int[,-1]),intersect=samples,\n      name='intensity quantified', min_degree=5, sort_sets=F, \n      width_ratio=0.1,min_size=10, keep_empty_groups=F, wrap=TRUE,\n         base_annotations=list(\n          'Number of hits'=ComplexUpset::intersection_size(text_colors=c(on_background='red', on_bar='yellow'),text=list(angle=0,hjust=0.45,size=2.8))\n           + annotate( geom='text', x=Inf, y=Inf, label=paste('Total hits:', nrow(na_int)), vjust=1, hjust=1 )\n         ),\n)\n\n\nCV_raw = calculate_cv(long_int_all,by_bio = T)\nbox_cv_raw = draw_boxcv(CV_raw,by_bio = T)\nCV_norm = calculate_cv(long_int_norm,by_bio = T)\nbox_cv_norm = draw_boxcv(CV_norm,by_bio = T)\n\nplot(box_cv_raw / box_cv_norm)\n\nshow_table_cv(CV_raw,by_bio = F)\nshow_table_cv(CV_raw,by_bio = T)\n\nshow_table_cv(CV_norm,by_bio = F)\nshow_table_cv(CV_norm,by_bio = T)\ndraw_normalization_density(int_raw,int_lfq,df.group)\n# scatterplots between all samples\nscmat_all=draw_scatterplots(datain=int_all)\nprint(scmat_all)\n\n# heatmap correlation\ncs_all=compute_samples_correlation(int_all)\nCOR_RANGE = range( cs_all[row(cs_all) == (col(cs_all) - 1)] )\n\nby_sample = df.group %>% column_to_rownames(\"sample\")\nhm_all=draw_heatmap_samples(mcor = cs_all,df.group=by_sample,col.group = col.group)\nint_all_scaled = scale(int_all,center=T, scale = T)\nmake_pca(na.omit(int_all_scaled), with_labels=T,col_by_group=1:4)\nsave.image(here('output',sprintf(\"%02d-quality-control.rdata\",chap_cur)))\n# example R options set globally\noptions(width = 60)\n\n# example chunk options set globally\nknitr::opts_chunk$set(\n  comment = \"#>\",\n  collapse = TRUE,\n  out.width=\"100%\"\n)\nchap_cur=05\n#load(here('output',sprintf(\"%02d-quality-control.rdata\",chap_cur-1)))\n# scatterplots between strains\nscmat_strains=draw_scatterplots(datain=int_filt_strains)\nprint(scmat_strains)\n# heatmap correlation\ncs_strains=compute_samples_correlation(int_filt_strains)\nCOR_RANGE = range( cs_strains[row(cs_strains) == (col(cs_strains) - 1)] )\n\nhm_strains=draw_heatmap_samples(mcor = cs_strains,df.group=c(),col.group = col.group)\nint_scaled_strains = scale(int_filt_strains,center=T, scale = T)\nmake_pca(na.omit(int_scaled_strains), with_labels=F,col_by_group=1:2)\nsave.image(here('output',sprintf(\"%02d-strain-comparison.rdata\",chap_cur)))\n# example R options set globally\noptions(width = 60)\n\n# example chunk options set globally\nknitr::opts_chunk$set(\n  comment = \"#>\",\n  collapse = TRUE,\n  out.width=\"100%\"\n)\nchap_cur=06\n#load(here::here('output',sprintf(\"%02d-strain-comparison.rdata\",chap_cur-1)))\n\nvolcPlot(INPUT=int_norm, MIN_LFC=2, MIN_PVAL=0.01, WHICH='both', TOPN = 20)\n\nvolcano_data =  get_volcano_data(input_data=int_norm, which='both',\n                            min_lfc=2, min_pval=0.01, topn = 20)\ndf_limma = bind_rows(volcano_data) %>% as_tibble()\ndfe = subset(df_limma,sig!='Non significant')\ndown = dfe %>% group_by(ID) %>% dplyr::filter(sig=='Downregulated') %>%\n       summarize( strains_down = paste0(comparison,collapse=' '),\n                  down_AMH = str_count(strains_down,'AMH-'),\n                  down_BAN = str_count(strains_down,'BAN-'),\n                  down_BED = str_count(strains_down,'BED-'),\n                  down_BPL = str_count(strains_down,'BPL-'),\n                  down_BTT = str_count(strains_down,'BTT-'),\n                  down_CMP = str_count(strains_down,'CMP-'),\n                  down_CPI = str_count(strains_down,'CPI-'),\n                  down_CQC = str_count(strains_down,'CQC-'))\nup = dfe %>% group_by(ID) %>% dplyr::filter(sig=='Upregulated') %>%  \n      summarize( strains_up = paste0(comparison,collapse=' '),\n                  up_AMH = str_count(strains_up,'AMH-'),\n                  up_BAN = str_count(strains_up,'BAN-'),\n                  up_BED = str_count(strains_up,'BED-'),\n                  up_BPL = str_count(strains_up,'BPL-'),\n                  up_BTT = str_count(strains_up,'BTT-'),\n                  up_CMP = str_count(strains_up,'CMP-'),\n                  up_CPI = str_count(strains_up,'CPI-'),\n                  up_CQC = str_count(strains_up,'CQC-'))\n# get_dfe(int_norm, MIN_LFC=2, MIN_PVAL=0.01,  WHICH='both', TOPN = 20) %>% remove_rownames() %>% \n#   dplyr::left_join(sc_identifiers, by=c('ID'='UNIPROT'))\n\n# Number of times a hit is differentially expressed\ndf_dfe = dfe %>% left_join(janitor::tabyl(dfe,ID,sig)) %>%\n         left_join(down) %>% left_join(up) %>%\n         rename(uniprot=ID) %>% \n         group_by(uniprot,comparison) %>% \n        mutate( n_strains_up = sum(c_across(starts_with('up_')) !=0 ),\n                n_strains_down = sum(c_across(starts_with('down_'))!=0)) %>%\n        replace_na(list(n_strains_up=0,n_strains_down=0)) %>%\n        left_join(evo_yeast, by=c('uniprot'='UNIPROT')) \n  \n\ndf_dfe_annot = df_dfe %>%\n          left_join(sc_annotation_orf,by=c('uniprot'='UNIPROT')) %>%\n  mutate(uniprot_link = paste0(\"<a href='https://www.uniprot.org/uniprot/\",uniprot,\"'>\",uniprot,\"<\/a>\"),\n         sgd_link = paste0(\"<a href='https://www.yeastgenome.org/locus/\",SGD,\"'>\",SGD,\"<\/a>\"),\n         regulated = Downregulated+Upregulated) %>% \n  dplyr::relocate(uniprot,uniprot_link,sgd_link,regulated,Downregulated,Upregulated, \n                  GENENAME,ORF,PNAME,'FUNCTION','BIOPROCESS_all','ORTHO','OTHER')\nlibrary(kableExtra)\nlibrary(formattable)\nlibrary(DT)\n\nft_dt = df_dfe_annot %>% \n  formattable(\n    list(\n      `Downregulated` = color_tile(\"white\", \"red\"),\n      `Upregulated` = color_tile(\"white\", \"blue\"),\n      `regulated` = color_tile(\"white\", \"gray\")\n    )\n) %>% as.datatable(\n        options = list(\n            fixedHeader=T,\n            paging = TRUE, pageLength = 20,  ## paginate the output and #rows for each page\n            scrollY = TRUE,   ## enable scrolling on X/Y axis\n            #autoWidth = TRUE, ## use smart column width handling\n            server = FALSE,   ## use client-side processing\n            dom = 'Bfrtip', buttons = list('csv', 'excel', list(extend = 'colvis')),\n            fixedColumns = list(leftColumns = 2),\n            columnDefs = list(list(visible=FALSE, targets=c(42:48)))\n          ),\n  extensions = c('FixedHeader','FixedColumns','Buttons'),\n  selection = 'single',           ## enable selection of a single row\n  filter = 'bottom',              ## include column filters at the bottom\n  rownames = FALSE,               ## don't show row numbers/names\n  width = NULL, \n  height = NULL,\n  caption = NULL\n) %>% \n   formatStyle(columns = 1:30, target= 'row',lineHeight='100%', `font-size` = '12px')\n\nft_dt\n\nlibrary(treemap)\nlibrary(d3Tree)\ntreemap(df_dfe_annot, index=c(\"BIOPROCESS_all\", \"comparison\"), vSize='regulated', vColor=\"EffectSize\", type=\"value\") \ntreemap(df_dfe_annot, index=c(\"BIOPROCESS_all\", \"GENENAME\"), vSize=\"regulated\", vColor=\"EffectSize\", type=\"value\",)\ndat_scaled = int_scaled_strains %>% as.data.frame() %>% rownames_to_column('uniprot')\n\n# Transpose the matrix to calculate distance between experiments, row-wise\nd_pair <- dat_scaled[,-1] %>% t() %>%\n  dist(.,method = \"euclidean\", diag = FALSE, upper = FALSE)\n# Calculate the distance between proteins row-wise \nd_prot <- dat_scaled %>% dplyr::filter( uniprot %in% dfe$ID) %>% dplyr::select(-uniprot) %>% dist(.,method = \"euclidean\", diag = FALSE, upper = FALSE)\n\ndfe_lfc = bind_rows(volcano_data) %>% \n          pivot_wider(id_cols=ID, names_from = 'comparison', values_from = 'EffectSize') %>% \n          dplyr::filter(ID %in% dfe$ID) %>% left_join(sc_identifiers,by=c('ID'='UNIPROT')) %>%\n          column_to_rownames('GENENAME') %>% dplyr::select(-ORF,-ID,-SGD)\npheatmap::pheatmap(t(dfe_lfc),fontsize = 5,cutree_rows = 5,cellwidth = 3,cellheight = 3,border_color = NA)\n\ndfe_exp = dat_scaled %>% dplyr::filter( uniprot %in% dfe$ID) %>%  left_join(sc_identifiers,by=c('uniprot'='UNIPROT'))  \n\n#p_dfe_exp=pheatmap::pheatmap(dfe_exp %>% dplyr::select(-ORF,-uniprot,-SGD) %>%column_to_rownames('GENENAME'),\n#                             fontsize = 8,cellwidth = 4,cellheight =4,border_color = NA,treeheight_col = 10)\n\ntextcol <- \"grey40\"\n# further modified ggplot\np <- ggplot(dfe_exp%>%pivot_longer(where(is.numeric), names_to = 'strain', values_to='exp'), \n            aes(y=strain, x=GENENAME, fill=exp))+\n  geom_tile(colour=\"white\", size=0.1)+\n  labs(x=\"\", y=\"\")+\n  scale_fill_gradientn(colours = colorRampPalette(rev(brewer.pal(n = 7, name =\n  \"RdYlBu\")))(100))+\n  #scale_fill_manual(values=c(\"#d53e4f\", \"#f46d43\", \"#fdae61\", \"#fee08b\", \"#e6f598\", \"#abdda4\", \"#ddf1da\"), na.value = \"grey90\")+\n  theme_grey(base_size=10)+\n  theme(legend.position=\"right\", legend.direction=\"vertical\",\n        legend.title=element_text(colour=textcol),\n        legend.margin=margin(grid::unit(0, \"cm\")),\n        legend.text=element_text(colour=textcol, size=7, face=\"bold\"),\n        legend.key.height=grid::unit(0.8, \"cm\"),\n        legend.key.width=grid::unit(0.2, \"cm\"),\n        axis.text.x=element_text(size=8, angle=90,colour=textcol,hjust = 1),\n        axis.text.y=element_text(vjust=0.2, colour=textcol),\n        axis.ticks=element_line(size=0.4),\n        plot.background=element_blank(),\n        panel.border=element_blank(),\n        plot.margin=margin(0.7, 0.4, 0.1, 0.2, \"cm\"),\n        plot.title=element_text(colour=textcol, hjust=0, size=14, face=\"bold\")\n        ) + coord_equal()\np\nsave.image(here('output',sprintf(\"%02d-differential-expression.rdata\",chap_cur)))\n# example R options set globally\noptions(width = 60)\n\n# example chunk options set globally\nknitr::opts_chunk$set(\n  comment = \"#>\",\n  collapse = TRUE,\n  out.width=\"100%\"\n)\nsessioninfo::session_info()\n# example R options set globally\noptions(width = 60)\n\n# example chunk options set globally\nknitr::opts_chunk$set(\n  comment = \"#>\",\n  collapse = TRUE,\n  out.width=\"100%\"\n)"},{"path":"session-info.html","id":"platform-info","chapter":"9 Session Info","heading":"9.2 Platform info","text":"\nTable 9.1: (Reproducibility - platform info)\n","code":"\ndf_platform = devtools::session_info()$platform %>% \n  unlist(.) %>% \n  as.data.frame(.) %>% \n  rownames_to_column(.)\n\nkable(\n  df_platform,\n  booktabs = T, \n  align = \"l\",\n  caption = \"(Reproducibility - platform info)\", # complete caption for main document\n  caption.short = \" \" # \n)"},{"path":"session-info.html","id":"packages-loaded-and-used-i.e.-attached-to-the-workspace","chapter":"9 Session Info","heading":"9.3 Packages loaded and used (i.e. attached to the workspace)","text":"\nTable 9.2: (Reproducibility - loaded packages)\nreproduce Rmarkdown document, may need run following lines\nloading/installing necessary packages:Copy paste code rsession:install.packages(‘xfun’)xfun::pkg_load2(c(“ape,” “BiocGenerics,” “BiocManager,” “Biostrings,” “corrplot,” “corrr,” “cowplot,” “d3Tree,” “data.table,” “dplyover,” “dplyr,” “DT,” “forcats,” “formattable,” “GenomeInfoDb,” “geomtextpath,” “GGally,” “ggcorrplot,” “ggfortify,” “ggplot2,” “ggplotify,” “ggpubr,” “ggrepel,” “ggsci,” “ggsignif,” “ggtext,” “ggthemes,” “ggtree,” “gplots,” “gridExtra,” “gtools,” “hablar,” “,” “hrbrthemes,” “hutils,” “IRanges,” “janitor,” “kableExtra,” “limma,” “NormalyzerDE,” “openxlsx,” “pbapply,” “performance,” “plotly,” “purrr,” “RColorBrewer,” “RCurl,” “readr,” “rio,” “S4Vectors,” “see,” “sessioninfo,” “stringr,” “tibble,” “tictoc,” “tidyr,” “tidyverse,” “treemap,” “xfun,” “XVector”))Pay attention error message might get.Common errors due :admin privileges write home R directorySome package installation requires prior linux libraries installedSome packages might available older R versionSome packages obtained CRAN Bioconductor (may require use function BiocManager::install())","code":""},{"path":"session-info.html","id":"all-packages-required-i.e.-including-dependencies","chapter":"9 Session Info","heading":"9.4 All packages required (i.e. including dependencies)","text":"\nTable 9.3: packages used (include dependencies)\n","code":""},{"path":"session-info.html","id":"session-info-1","chapter":"9 Session Info","heading":"9.5 Session info","text":"","code":"\nsessioninfo::session_info()\n#> ─ Session info ───────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.1.2 (2021-11-01)\n#>  os       Linux Mint 20.3\n#>  system   x86_64, linux-gnu\n#>  ui       X11\n#>  language en_IL:en\n#>  collate  en_IL.UTF-8\n#>  ctype    en_IL.UTF-8\n#>  tz       Asia/Jerusalem\n#>  date     2022-06-02\n#>  pandoc   2.14.0.3 @ /usr/lib/rstudio/bin/pandoc/ (via rmarkdown)\n#> \n#> ─ Packages ───────────────────────────────────────────────\n#>  package              * version    date (UTC) lib source\n#>  abind                  1.4-5      2016-07-21 [2] CRAN (R 4.1.2)\n#>  affy                   1.72.0     2021-10-26 [1] Bioconductor\n#>  affyio                 1.64.0     2021-10-26 [1] Bioconductor\n#>  ape                  * 5.6-2      2022-03-02 [1] CRAN (R 4.1.2)\n#>  aplot                  0.1.2      2022-01-10 [1] CRAN (R 4.1.2)\n#>  assertthat             0.2.1      2019-03-21 [3] CRAN (R 4.0.0)\n#>  backports              1.4.1      2021-12-13 [3] CRAN (R 4.1.2)\n#>  base64enc              0.1-3      2015-07-28 [3] CRAN (R 4.0.0)\n#>  beeswarm               0.4.0      2021-06-01 [1] CRAN (R 4.1.2)\n#>  Biobase                2.54.0     2021-10-26 [1] Bioconductor\n#>  BiocGenerics         * 0.40.0     2021-10-26 [1] Bioconductor\n#>  BiocManager          * 1.30.16    2021-06-15 [1] CRAN (R 4.1.2)\n#>  Biostrings           * 2.62.0     2021-10-26 [1] Bioconductor\n#>  bit                    4.0.4      2020-08-04 [3] CRAN (R 4.0.2)\n#>  bit64                  4.0.5      2020-08-30 [3] CRAN (R 4.0.2)\n#>  bitops                 1.0-7      2021-04-24 [1] CRAN (R 4.1.2)\n#>  bookdown               0.26       2022-04-15 [1] CRAN (R 4.1.2)\n#>  brio                   1.1.3      2021-11-30 [1] CRAN (R 4.1.2)\n#>  broom                  0.7.11     2022-01-03 [3] CRAN (R 4.1.2)\n#>  bslib                  0.3.1      2021-10-06 [1] CRAN (R 4.1.2)\n#>  cachem                 1.0.6      2021-08-19 [1] CRAN (R 4.1.2)\n#>  callr                  3.7.0      2021-04-20 [3] CRAN (R 4.0.5)\n#>  car                    3.0-12     2021-11-06 [2] CRAN (R 4.1.2)\n#>  carData                3.0-5      2022-01-06 [2] CRAN (R 4.1.2)\n#>  caTools                1.18.2     2021-03-28 [1] CRAN (R 4.1.2)\n#>  cellranger             1.1.0      2016-07-27 [3] CRAN (R 4.0.0)\n#>  checkmate              2.0.0      2020-02-06 [1] CRAN (R 4.1.2)\n#>  class                  7.3-20     2022-01-13 [4] CRAN (R 4.1.2)\n#>  cli                    3.3.0      2022-04-25 [1] CRAN (R 4.1.2)\n#>  cluster                2.1.2      2021-04-17 [4] CRAN (R 4.0.5)\n#>  codetools              0.2-18     2020-11-04 [4] CRAN (R 4.0.3)\n#>  colorspace             2.0-3      2022-02-21 [1] CRAN (R 4.1.2)\n#>  ComplexUpset           1.3.3      2021-12-11 [1] CRAN (R 4.1.2)\n#>  corrplot             * 0.92       2021-11-18 [2] CRAN (R 4.1.2)\n#>  corrr                * 0.4.3      2020-11-24 [1] CRAN (R 4.1.2)\n#>  cowplot              * 1.1.1      2020-12-30 [1] CRAN (R 4.1.2)\n#>  crayon                 1.5.1      2022-03-26 [1] CRAN (R 4.1.2)\n#>  crosstalk              1.2.0      2021-11-04 [2] CRAN (R 4.1.2)\n#>  curl                   4.3.2      2021-06-23 [1] CRAN (R 4.1.2)\n#>  d3Tree               * 0.2.2      2020-12-10 [1] CRAN (R 4.1.2)\n#>  data.table           * 1.14.2     2021-09-27 [3] CRAN (R 4.1.1)\n#>  DBI                    1.1.2      2021-12-20 [1] CRAN (R 4.1.2)\n#>  dbplyr                 2.1.1      2021-04-06 [3] CRAN (R 4.0.5)\n#>  DelayedArray           0.20.0     2021-10-26 [1] Bioconductor\n#>  desc                   1.4.1      2022-03-06 [1] CRAN (R 4.1.2)\n#>  devtools               2.4.3      2021-11-30 [1] CRAN (R 4.1.2)\n#>  digest                 0.6.29     2021-12-01 [3] CRAN (R 4.1.2)\n#>  downlit                0.4.0      2021-10-29 [1] CRAN (R 4.1.2)\n#>  dplyover             * 0.0.8.9002 2022-06-02 [1] Github (TimTeaFan/dplyover@f0cd984)\n#>  dplyr                * 1.0.9      2022-04-28 [1] CRAN (R 4.1.2)\n#>  DT                   * 0.22       2022-03-28 [1] CRAN (R 4.1.2)\n#>  e1071                  1.7-9      2021-09-16 [2] CRAN (R 4.1.2)\n#>  ellipsis               0.3.2      2021-04-29 [3] CRAN (R 4.0.5)\n#>  evaluate               0.14       2019-05-28 [3] CRAN (R 4.0.0)\n#>  extrafont              0.17       2014-12-08 [1] CRAN (R 4.1.2)\n#>  extrafontdb            1.0        2012-06-11 [2] CRAN (R 4.1.2)\n#>  fansi                  1.0.3      2022-03-24 [1] CRAN (R 4.1.2)\n#>  farver                 2.1.0      2021-02-28 [3] CRAN (R 4.0.4)\n#>  fastmap                1.1.0      2021-01-25 [3] CRAN (R 4.0.3)\n#>  fastmatch              1.1-3      2021-07-23 [1] CRAN (R 4.1.2)\n#>  forcats              * 0.5.1      2021-01-27 [3] CRAN (R 4.0.3)\n#>  foreign                0.8-82     2022-01-13 [4] CRAN (R 4.1.2)\n#>  formattable          * 0.2.1      2021-01-07 [1] CRAN (R 4.1.2)\n#>  Formula                1.2-4      2020-10-16 [1] CRAN (R 4.1.2)\n#>  fs                     1.5.2      2021-12-08 [3] CRAN (R 4.1.2)\n#>  gdtools                0.2.3      2021-01-06 [2] CRAN (R 4.1.2)\n#>  generics               0.1.2      2022-01-31 [1] CRAN (R 4.1.2)\n#>  GenomeInfoDb         * 1.30.1     2022-01-30 [1] Bioconductor\n#>  GenomeInfoDbData       1.2.7      2022-01-25 [1] Bioconductor\n#>  GenomicRanges          1.46.1     2021-11-18 [1] Bioconductor\n#>  geomtextpath         * 0.1.0      2022-01-24 [1] CRAN (R 4.1.2)\n#>  GGally               * 2.1.2      2021-06-21 [1] CRAN (R 4.1.2)\n#>  ggbeeswarm             0.6.0      2017-08-07 [1] CRAN (R 4.1.2)\n#>  ggcorrplot           * 0.1.3      2019-05-19 [1] CRAN (R 4.1.2)\n#>  ggfortify            * 0.4.14     2022-01-03 [1] CRAN (R 4.1.2)\n#>  ggfun                  0.0.5      2022-01-20 [1] CRAN (R 4.1.2)\n#>  ggplot2              * 3.3.5      2021-06-25 [3] CRAN (R 4.1.0)\n#>  ggplotify            * 0.1.0      2021-09-02 [1] CRAN (R 4.1.2)\n#>  ggpubr               * 0.4.0      2020-06-27 [2] CRAN (R 4.1.2)\n#>  ggrepel              * 0.9.1      2021-01-15 [1] CRAN (R 4.1.2)\n#>  ggsci                * 2.9        2018-05-14 [2] CRAN (R 4.1.2)\n#>  ggsignif             * 0.6.3      2021-09-09 [2] CRAN (R 4.1.2)\n#>  ggtext               * 0.1.1      2020-12-17 [2] CRAN (R 4.1.2)\n#>  ggthemes             * 4.2.4      2021-01-20 [2] CRAN (R 4.1.2)\n#>  ggtree               * 3.2.1      2021-11-16 [1] Bioconductor\n#>  glue                   1.6.2      2022-02-24 [1] CRAN (R 4.1.2)\n#>  gplots               * 3.1.3      2022-04-25 [1] CRAN (R 4.1.2)\n#>  gridBase               0.4-7      2014-02-24 [1] CRAN (R 4.1.2)\n#>  gridExtra            * 2.3        2017-09-09 [2] CRAN (R 4.1.2)\n#>  gridGraphics           0.5-1      2020-12-13 [1] CRAN (R 4.1.2)\n#>  gridtext               0.1.4      2020-12-10 [2] CRAN (R 4.1.2)\n#>  gtable                 0.3.0      2019-03-25 [3] CRAN (R 4.0.0)\n#>  gtools               * 3.9.2      2021-06-06 [1] CRAN (R 4.1.2)\n#>  hablar               * 0.3.0      2020-03-19 [1] CRAN (R 4.1.2)\n#>  haven                  2.4.3      2021-08-04 [3] CRAN (R 4.1.0)\n#>  here                 * 1.0.1      2020-12-13 [1] CRAN (R 4.1.2)\n#>  highr                  0.9        2021-04-16 [3] CRAN (R 4.0.5)\n#>  Hmisc                  4.6-0      2021-10-07 [1] CRAN (R 4.1.2)\n#>  hms                    1.1.1      2021-09-26 [3] CRAN (R 4.1.1)\n#>  hrbrthemes           * 0.8.0      2020-03-06 [2] CRAN (R 4.1.2)\n#>  htmlTable              2.4.0      2022-01-04 [1] CRAN (R 4.1.2)\n#>  htmltools              0.5.2      2021-08-25 [3] CRAN (R 4.1.1)\n#>  htmlwidgets            1.5.4      2021-09-08 [2] CRAN (R 4.1.2)\n#>  httpuv                 1.6.5      2022-01-05 [1] CRAN (R 4.1.2)\n#>  httr                   1.4.2      2020-07-20 [3] CRAN (R 4.0.2)\n#>  hutils               * 1.7.1      2021-07-22 [1] CRAN (R 4.1.2)\n#>  igraph                 1.2.11     2022-01-04 [1] CRAN (R 4.1.2)\n#>  insight                0.15.0     2022-01-07 [2] CRAN (R 4.1.2)\n#>  IRanges              * 2.28.0     2021-10-26 [1] Bioconductor\n#>  janitor              * 2.1.0      2021-01-05 [1] CRAN (R 4.1.2)\n#>  jpeg                   0.1-9      2021-07-24 [2] CRAN (R 4.1.2)\n#>  jquerylib              0.1.4      2021-04-26 [3] CRAN (R 4.0.5)\n#>  jsonlite               1.8.0      2022-02-22 [1] CRAN (R 4.1.2)\n#>  kableExtra           * 1.3.4      2021-02-20 [1] CRAN (R 4.1.2)\n#>  KernSmooth             2.23-20    2021-05-03 [4] CRAN (R 4.0.5)\n#>  knitr                  1.37       2021-12-16 [3] CRAN (R 4.1.2)\n#>  labeling               0.4.2      2020-10-20 [3] CRAN (R 4.0.3)\n#>  later                  1.3.0      2021-08-18 [2] CRAN (R 4.1.2)\n#>  lattice                0.20-45    2021-09-22 [4] CRAN (R 4.1.1)\n#>  latticeExtra           0.6-29     2019-12-19 [1] CRAN (R 4.1.2)\n#>  lazyeval               0.2.2      2019-03-15 [2] CRAN (R 4.1.2)\n#>  lifecycle              1.0.1      2021-09-24 [3] CRAN (R 4.1.1)\n#>  limma                * 3.50.3     2022-04-07 [1] Bioconductor\n#>  lubridate              1.8.0      2021-10-07 [3] CRAN (R 4.1.1)\n#>  magrittr               2.0.3      2022-03-30 [1] CRAN (R 4.1.2)\n#>  MASS                   7.3-55     2022-01-13 [4] CRAN (R 4.1.2)\n#>  Matrix                 1.4-0      2021-12-08 [4] CRAN (R 4.1.2)\n#>  MatrixGenerics         1.6.0      2021-10-26 [1] Bioconductor\n#>  matrixStats            0.61.0     2021-09-17 [2] CRAN (R 4.1.2)\n#>  memoise                2.0.1      2021-11-26 [1] CRAN (R 4.1.2)\n#>  mgcv                   1.8-38     2021-10-06 [4] CRAN (R 4.1.1)\n#>  mime                   0.12       2021-09-28 [3] CRAN (R 4.1.1)\n#>  modelr                 0.1.8      2020-05-19 [3] CRAN (R 4.0.0)\n#>  munsell                0.5.0      2018-06-12 [3] CRAN (R 4.0.0)\n#>  nlme                   3.1-155    2022-01-13 [4] CRAN (R 4.1.2)\n#>  nnet                   7.3-17     2022-01-13 [4] CRAN (R 4.1.2)\n#>  NormalyzerDE         * 1.12.0     2021-10-26 [1] Bioconductor\n#>  nortest                1.0-4      2015-07-30 [1] CRAN (R 4.1.2)\n#>  openxlsx             * 4.2.5      2021-12-14 [1] CRAN (R 4.1.2)\n#>  patchwork              1.1.1      2020-12-17 [1] CRAN (R 4.1.2)\n#>  pbapply              * 1.5-0      2021-09-16 [1] CRAN (R 4.1.2)\n#>  performance          * 0.8.0      2021-10-01 [2] CRAN (R 4.1.2)\n#>  pheatmap               1.0.12     2019-01-04 [1] CRAN (R 4.1.2)\n#>  pillar                 1.7.0      2022-02-01 [1] CRAN (R 4.1.2)\n#>  pkgbuild               1.3.1      2021-12-20 [1] CRAN (R 4.1.2)\n#>  pkgconfig              2.0.3      2019-09-22 [3] CRAN (R 4.0.0)\n#>  pkgload                1.2.4      2021-11-30 [1] CRAN (R 4.1.2)\n#>  plotly               * 4.10.0     2021-10-09 [2] CRAN (R 4.1.2)\n#>  plyr                   1.8.6      2020-03-03 [1] CRAN (R 4.1.2)\n#>  png                    0.1-7      2013-12-03 [1] CRAN (R 4.1.2)\n#>  preprocessCore         1.56.0     2021-10-26 [1] Bioconductor\n#>  prettyunits            1.1.1      2020-01-24 [3] CRAN (R 4.0.0)\n#>  processx               3.5.2      2021-04-30 [3] CRAN (R 4.0.5)\n#>  promises               1.2.0.1    2021-02-11 [2] CRAN (R 4.1.2)\n#>  proxy                  0.4-26     2021-06-07 [2] CRAN (R 4.1.2)\n#>  ps                     1.6.0      2021-02-28 [3] CRAN (R 4.0.4)\n#>  purrr                * 0.3.4      2020-04-17 [3] CRAN (R 4.0.0)\n#>  R6                     2.5.1      2021-08-19 [3] CRAN (R 4.1.1)\n#>  raster                 3.5-15     2022-01-22 [1] CRAN (R 4.1.2)\n#>  RcmdrMisc              2.7-2      2022-01-05 [1] CRAN (R 4.1.2)\n#>  RColorBrewer         * 1.1-3      2022-04-03 [1] CRAN (R 4.1.2)\n#>  Rcpp                   1.0.8      2022-01-13 [3] CRAN (R 4.1.2)\n#>  RCurl                * 1.98-1.5   2021-09-17 [3] CRAN (R 4.1.1)\n#>  readr                * 2.1.1      2021-11-30 [3] CRAN (R 4.1.2)\n#>  readxl                 1.3.1      2019-03-13 [3] CRAN (R 4.0.0)\n#>  remotes                2.4.2      2021-11-30 [1] CRAN (R 4.1.2)\n#>  reprex                 2.0.1      2021-08-05 [3] CRAN (R 4.1.0)\n#>  reshape                0.8.8      2018-10-23 [1] CRAN (R 4.1.2)\n#>  reshape2               1.4.4      2020-04-09 [2] CRAN (R 4.1.2)\n#>  rio                  * 0.5.29     2021-11-22 [1] CRAN (R 4.1.2)\n#>  rlang                  1.0.2      2022-03-04 [1] CRAN (R 4.1.2)\n#>  rmarkdown              2.14       2022-04-25 [1] CRAN (R 4.1.2)\n#>  rpart                  4.1.16     2022-01-24 [1] CRAN (R 4.1.2)\n#>  rprojroot              2.0.2      2020-11-15 [1] CRAN (R 4.1.2)\n#>  rstatix                0.7.0      2021-02-13 [1] CRAN (R 4.1.2)\n#>  rstudioapi             0.13       2020-11-12 [3] CRAN (R 4.0.3)\n#>  Rttf2pt1               1.3.8      2020-01-10 [1] CRAN (R 4.1.2)\n#>  rvest                  1.0.2      2021-10-16 [1] CRAN (R 4.1.2)\n#>  S4Vectors            * 0.32.3     2021-11-21 [1] Bioconductor\n#>  sandwich               3.0-1      2021-05-18 [1] CRAN (R 4.1.2)\n#>  sass                   0.4.0      2021-05-12 [1] CRAN (R 4.1.2)\n#>  scales                 1.2.0      2022-04-13 [1] CRAN (R 4.1.2)\n#>  see                  * 0.6.8      2021-10-03 [2] CRAN (R 4.1.2)\n#>  sessioninfo          * 1.2.2      2021-12-06 [1] CRAN (R 4.1.2)\n#>  shiny                  1.7.1      2021-10-02 [1] CRAN (R 4.1.2)\n#>  snakecase              0.11.0     2019-05-25 [1] CRAN (R 4.1.2)\n#>  sp                     1.4-6      2021-11-14 [2] CRAN (R 4.1.2)\n#>  statmod                1.4.36     2021-05-10 [1] CRAN (R 4.1.2)\n#>  stringi                1.7.6      2021-11-29 [3] CRAN (R 4.1.2)\n#>  stringr              * 1.4.0      2019-02-10 [3] CRAN (R 4.0.0)\n#>  SummarizedExperiment   1.24.0     2021-10-26 [1] Bioconductor\n#>  survival               3.2-13     2021-08-24 [4] CRAN (R 4.1.1)\n#>  svglite                2.0.0      2021-02-20 [3] CRAN (R 4.0.4)\n#>  systemfonts            1.0.3      2021-10-13 [3] CRAN (R 4.1.1)\n#>  terra                  1.5-21     2022-02-17 [1] CRAN (R 4.1.2)\n#>  testthat               3.1.2      2022-01-20 [1] CRAN (R 4.1.2)\n#>  textshaping            0.3.6      2021-10-13 [1] CRAN (R 4.1.2)\n#>  tibble               * 3.1.6      2021-11-07 [3] CRAN (R 4.1.2)\n#>  tictoc               * 1.0.1      2021-04-19 [2] CRAN (R 4.1.2)\n#>  tidyr                * 1.2.0      2022-02-01 [1] CRAN (R 4.1.2)\n#>  tidyselect             1.1.2      2022-02-21 [1] CRAN (R 4.1.2)\n#>  tidytree               0.3.9      2022-03-04 [1] CRAN (R 4.1.2)\n#>  tidyverse            * 1.3.1      2021-04-15 [3] CRAN (R 4.0.5)\n#>  treeio                 1.18.1     2021-11-14 [1] Bioconductor\n#>  treemap              * 2.4-3      2021-08-22 [1] CRAN (R 4.1.2)\n#>  tzdb                   0.2.0      2021-10-27 [3] CRAN (R 4.1.1)\n#>  usethis                2.1.5      2021-12-09 [1] CRAN (R 4.1.2)\n#>  utf8                   1.2.2      2021-07-24 [3] CRAN (R 4.1.0)\n#>  vctrs                  0.4.1      2022-04-13 [1] CRAN (R 4.1.2)\n#>  vipor                  0.4.5      2017-03-22 [1] CRAN (R 4.1.2)\n#>  viridisLite            0.4.0      2021-04-13 [3] CRAN (R 4.0.5)\n#>  vroom                  1.5.7      2021-11-30 [3] CRAN (R 4.1.2)\n#>  vsn                    3.62.0     2021-10-26 [1] Bioconductor\n#>  webshot                0.5.2      2019-11-22 [1] CRAN (R 4.1.2)\n#>  withr                  2.5.0      2022-03-03 [1] CRAN (R 4.1.2)\n#>  xfun                 * 0.31       2022-05-10 [1] CRAN (R 4.1.2)\n#>  xml2                   1.3.3      2021-11-30 [3] CRAN (R 4.1.2)\n#>  xtable                 1.8-4      2019-04-21 [1] CRAN (R 4.1.2)\n#>  XVector              * 0.34.0     2021-10-26 [1] Bioconductor\n#>  yaml                   2.2.1      2020-02-01 [3] CRAN (R 4.0.0)\n#>  yulab.utils            0.0.4      2021-10-09 [1] CRAN (R 4.1.2)\n#>  zip                    2.2.0      2021-05-31 [1] CRAN (R 4.1.2)\n#>  zlibbioc               1.40.0     2021-10-26 [1] Bioconductor\n#>  zoo                    1.8-10     2022-04-15 [1] CRAN (R 4.1.2)\n#> \n#>  [1] /home/benjamin/R/x86_64-pc-linux-gnu-library/4.1\n#>  [2] /usr/local/lib/R/site-library\n#>  [3] /usr/lib/R/site-library\n#>  [4] /usr/lib/R/library\n#> \n#> ──────────────────────────────────────────────────────────"},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"Drummond, D. ., Raval, . & Wilke, C. O. single determinant dominates rate yeast protein evolution. Mol. Biol. Evol. 23, 327–337 (2006).Drummond, D. . & Wilke, C. O. Mistranslation-induced protein misfolding dominant constraint coding-sequence evolution. Cell 134, 341–352 (2008).Drummond, D. ., Bloom, J. D., Adami, C., Wilke, C. O. & Arnold, F. H. highly expressed proteins evolve slowly. Proc. Natl. Acad. Sci. U. S. . 102, 14338–14343 (2005).Pal, C., Papp, B. & Hurst, L. D. Highly expressed genes yeast evolve slowly. Genetics 158, 927–931 (2001).Jimenez, M. J., Arenas, M. & Bastolla, U. Substitution rates predicted stability-constrained models protein evolution consistent empirical data. Mol. Biol. Evol. (2017). doi:10.1093/molbev/msx327Schavemaker, P. E., Śmigiel, W. M. & Poolman, B. Ribosome surface properties may impose limits nature cytoplasmic proteome. Elife 6, (2017).Yang, J. R., Liao, B. Y., Zhuang, S. M. & Zhang, J. Z. Protein misinteraction avoidance causes highly expressed proteins evolve slowly. Proc. Natl. Acad. Sci. U. S. . 109, E831–E840 (2012).Plata, G. & Vitkup, D. Avoidance toxic misfolding protein stability explain sequence constraints highly expressed proteins. Mol. Biol. Evol. (2017). doi:10.1093/molbev/msx323","code":""}]
